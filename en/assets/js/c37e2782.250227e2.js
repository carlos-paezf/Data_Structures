"use strict";(self.webpackChunkdata_structures=self.webpackChunkdata_structures||[]).push([[8166],{1470:(e,n,a)=>{a.d(n,{A:()=>w});var r=a(6540),t=a(4164),i=a(3104),l=a(6347),s=a(205),d=a(7485),o=a(1682),c=a(679);function u(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:a}=e;return(0,r.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:a,default:r}})=>({value:e,label:n,attributes:a,default:r}))}(a);return function(e){const n=(0,o.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,a])}function x({value:e,tabValues:n}){return n.some(n=>n.value===e)}function p({queryString:e=!1,groupId:n}){const a=(0,l.W6)(),t=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,d.aZ)(t),(0,r.useCallback)(e=>{if(!t)return;const n=new URLSearchParams(a.location.search);n.set(t,e),a.replace({...a.location,search:n.toString()})},[t,a])]}function m(e){const{defaultValue:n,queryString:a=!1,groupId:t}=e,i=h(e),[l,d]=(0,r.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!x({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=n.find(e=>e.default)??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i})),[o,u]=p({queryString:a,groupId:t}),[m,j]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[a,t]=(0,c.Dv)(n);return[a,(0,r.useCallback)(e=>{n&&t.set(e)},[n,t])]}({groupId:t}),v=(()=>{const e=o??m;return x({value:e,tabValues:i})?e:null})();(0,s.A)(()=>{v&&d(v)},[v]);return{selectedValue:l,selectValue:(0,r.useCallback)(e=>{if(!x({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),j(e)},[u,j,i]),tabValues:i}}var j=a(2303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=a(4848);function N({className:e,block:n,selectedValue:a,selectValue:r,tabValues:l}){const s=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),o=e=>{const n=e.currentTarget,t=s.indexOf(n),i=l[t].value;i!==a&&(d(n),r(i))},c=e=>{let n=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const a=s.indexOf(e.currentTarget)+1;n=s[a]??s[0];break}case"ArrowLeft":{const a=s.indexOf(e.currentTarget)-1;n=s[a]??s[s.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},e),children:l.map(({value:e,label:n,attributes:r})=>(0,g.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:e=>{s.push(e)},onKeyDown:c,onClick:o,...r,className:(0,t.A)("tabs__item",v.tabItem,r?.className,{"tabs__item--active":a===e}),children:n??e},e))})}function f({lazy:e,children:n,selectedValue:a}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find(e=>e.props.value===a);return e?(0,r.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:i.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))})}function b(e){const n=m(e);return(0,g.jsxs)("div",{className:(0,t.A)("tabs-container",v.tabList),children:[(0,g.jsx)(N,{...n,...e}),(0,g.jsx)(f,{...n,...e})]})}function w(e){const n=(0,j.A)();return(0,g.jsx)(b,{...e,children:u(e.children)},String(n))}},7637:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>x,frontMatter:()=>d,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"linear_structures_and_use_of_nodes/doubly_linked_list","title":"Lista Enlazada Doble","description":"Una lista enlazada doble es una estructura de datos lineal que extiende el concepto de la lista enlazada simple. Cada nodo contiene referencias tanto al siguiente nodo como al anterior, permitiendo un recorrido en ambas direcciones.","source":"@site/docs/04_linear_structures_and_use_of_nodes/03_doubly_linked_list.md","sourceDirName":"04_linear_structures_and_use_of_nodes","slug":"/linear_structures_and_use_of_nodes/doubly_linked_list","permalink":"/Data_Structures/en/docs/linear_structures_and_use_of_nodes/doubly_linked_list","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/04_linear_structures_and_use_of_nodes/03_doubly_linked_list.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar-position":3},"sidebar":"tutorialSidebar","previous":{"title":"Lista Enlazada Simple","permalink":"/Data_Structures/en/docs/linear_structures_and_use_of_nodes/singly_linked_list"},"next":{"title":"Lista Enlazada Circular Simple","permalink":"/Data_Structures/en/docs/linear_structures_and_use_of_nodes/singly_circular_linked_list"}}');var t=a(4848),i=a(8453),l=a(1470),s=a(9365);const d={"sidebar-position":3},o="Lista Enlazada Doble",c={},u=[{value:"Caracter\xedsticas",id:"caracter\xedsticas",level:2},{value:"Ventajas",id:"ventajas",level:2},{value:"Desventajas",id:"desventajas",level:2},{value:"Complejidad de operaciones",id:"complejidad-de-operaciones",level:2},{value:"Representaci\xf3n Visual",id:"representaci\xf3n-visual",level:2},{value:"Flujo de acciones",id:"flujo-de-acciones",level:2},{value:"Inserci\xf3n al inicio",id:"inserci\xf3n-al-inicio",level:3},{value:"Inserci\xf3n al final",id:"inserci\xf3n-al-final",level:3},{value:"Insertar en una posici\xf3n especifica",id:"insertar-en-una-posici\xf3n-especifica",level:3},{value:"Eliminaci\xf3n",id:"eliminaci\xf3n",level:3},{value:"Ejemplo T\xe9cnico",id:"ejemplo-t\xe9cnico",level:2},{value:"Aplicaciones Pr\xe1cticas",id:"aplicaciones-pr\xe1cticas",level:2},{value:"Referencias",id:"referencias",level:2}];function h(e){const n={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",math:"math",mermaid:"mermaid",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"lista-enlazada-doble",children:"Lista Enlazada Doble"})}),"\n",(0,t.jsxs)(n.p,{children:["Una ",(0,t.jsx)(n.strong,{children:"lista enlazada doble"})," es una estructura de datos lineal que extiende el concepto de la lista enlazada simple. Cada nodo contiene referencias tanto al ",(0,t.jsx)(n.strong,{children:"siguiente nodo"})," como al anterior, permitiendo un recorrido en ambas direcciones."]}),"\n",(0,t.jsx)(n.h2,{id:"caracter\xedsticas",children:"Caracter\xedsticas"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Cada nodo contiene:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Un dato."}),"\n",(0,t.jsxs)(n.li,{children:["Una referencia al siguiente nodo (",(0,t.jsx)(n.code,{children:"next"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:["Una referencia al nodo anterior (",(0,t.jsx)(n.code,{children:"prev"}),")."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Tiene dos puntos de referencia principales:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"head:"})," apunta al primer nodo."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"tail:"})," apunta al \xfaltimo nodo."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["El primer nodo tiene su referencia ",(0,t.jsx)(n.code,{children:"prev = null"})," y el \xfaltimo nodo tiene ",(0,t.jsx)(n.code,{children:"next = null"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"ventajas",children:"Ventajas"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Permite recorrer la lista hacia adelante y hacia atr\xe1s."}),"\n",(0,t.jsx)(n.li,{children:"Las operaciones de inserci\xf3n y eliminaci\xf3n son m\xe1s flexibles (no se requiere recorrer desde el inicio si tenemos un puntero al nodo)."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"desventajas",children:"Desventajas"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Ocupa m\xe1s memoria (almacena dos referencias por nodo)."}),"\n",(0,t.jsx)(n.li,{children:"Mayor complejidad en la manipulaci\xf3n de punteros/referencias."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"complejidad-de-operaciones",children:"Complejidad de operaciones"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Acceso: ",(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsxs)(n.mrow,{children:[(0,t.jsx)(n.mi,{children:"O"}),(0,t.jsx)(n.mo,{stretchy:"false",children:"("}),(0,t.jsx)(n.mi,{children:"n"}),(0,t.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,t.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,t.jsx)(n.span,{className:"mopen",children:"("}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(n.span,{className:"mclose",children:")"})]})})]})]}),"\n",(0,t.jsxs)(n.li,{children:["Inserci\xf3n/Eliminaci\xf3n en extremos: ",(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsxs)(n.mrow,{children:[(0,t.jsx)(n.mi,{children:"O"}),(0,t.jsx)(n.mo,{stretchy:"false",children:"("}),(0,t.jsx)(n.mn,{children:"1"}),(0,t.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(1)"})]})})}),(0,t.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,t.jsx)(n.span,{className:"mopen",children:"("}),(0,t.jsx)(n.span,{className:"mord",children:"1"}),(0,t.jsx)(n.span,{className:"mclose",children:")"})]})})]})]}),"\n",(0,t.jsxs)(n.li,{children:["Inserci\xf3n/Eliminaci\xf3n en posici\xf3n intermedia: ",(0,t.jsxs)(n.span,{className:"katex",children:[(0,t.jsx)(n.span,{className:"katex-mathml",children:(0,t.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(n.semantics,{children:[(0,t.jsxs)(n.mrow,{children:[(0,t.jsx)(n.mi,{children:"O"}),(0,t.jsx)(n.mo,{stretchy:"false",children:"("}),(0,t.jsx)(n.mi,{children:"n"}),(0,t.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,t.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,t.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(n.span,{className:"base",children:[(0,t.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,t.jsx)(n.span,{className:"mopen",children:"("}),(0,t.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(n.span,{className:"mclose",children:")"})]})})]})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"representaci\xf3n-visual",children:"Representaci\xf3n Visual"}),"\n",(0,t.jsx)(n.mermaid,{value:"graph LR\n    A((Head)) <--\x3e B[Node1: prev, data, next]\n    B <--\x3e C[Node2: prev, data, next]\n    C <--\x3e D[Node3: prev, data, next]\n    D <--\x3e E((Tail))"}),"\n",(0,t.jsx)(n.h2,{id:"flujo-de-acciones",children:"Flujo de acciones"}),"\n",(0,t.jsx)(n.h3,{id:"inserci\xf3n-al-inicio",children:"Inserci\xf3n al inicio"}),"\n",(0,t.jsx)(n.mermaid,{value:'flowchart TD\n    A["Inicio: insertAtBeginning(data)"] --\x3e B{"\xbfLa lista est\xe1 vac\xeda? (head == null)"}\n    B -- S\xed --\x3e C["Crear un nuevo nodo con el dato"]\n    C --\x3e D["Asignar head y tail al nuevo nodo"]\n    D --\x3e Z["Fin"]\n\n    B -- No --\x3e E["Crear un nuevo nodo con el dato"]\n    E --\x3e F["Enlazar nuevoNodo.next = head"]\n    F --\x3e G["Enlazar head.prev = nuevoNodo"]\n    G --\x3e H["Actualizar head = nuevoNodo"]\n    H --\x3e Z["Fin"]'}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Verificar si la lista est\xe1 vac\xeda:"})," Si ",(0,t.jsx)(n.code,{children:"head == null"}),", se crea un nuevo nodo y tanto ",(0,t.jsx)(n.code,{children:"head"})," como ",(0,t.jsx)(n.code,{children:"tail"})," apuntan a \xe9l."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Si la lista no est\xe1 vac\xeda:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Se crea un nuevo nodo."}),"\n",(0,t.jsxs)(n.li,{children:["Su puntero ",(0,t.jsx)(n.code,{children:"next"})," apunta al nodo actual de ",(0,t.jsx)(n.code,{children:"head"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Se actualiza el puntero ",(0,t.jsx)(n.code,{children:"prev"})," del nodo original de ",(0,t.jsx)(n.code,{children:"head"})," para que apunte al nuevo nodo."]}),"\n",(0,t.jsxs)(n.li,{children:["Finalmente, se asigna el nuevo nodo como ",(0,t.jsx)(n.code,{children:"head"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"inserci\xf3n-al-final",children:"Inserci\xf3n al final"}),"\n",(0,t.jsx)(n.mermaid,{value:'flowchart TD\n    A["Inicio: insertAtEnd(data)"] --\x3e B{"\xbfLa lista est\xe1 vac\xeda? (head == null)"}\n    B -- S\xed --\x3e C["Crear un nuevo nodo con el dato"]\n    C --\x3e D["Asignar head y tail al nuevo nodo"]\n    D --\x3e Z["Fin"]\n\n    B -- No --\x3e E["Crear un nuevo nodo con el dato"]\n    E --\x3e F["Enlazar tail.next = nuevoNodo"]\n    F --\x3e G["Enlazar nuevoNodo.prev = tail"]\n    G --\x3e H["Actualizar tail = nuevoNodo"]\n    H --\x3e Z["Fin"]'}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Verificar si la lista est\xe1 vac\xeda:"})," Si ",(0,t.jsx)(n.code,{children:"head == null"}),", se crea un nuevo nodo y tanto ",(0,t.jsx)(n.code,{children:"head"})," como ",(0,t.jsx)(n.code,{children:"tail"})," apuntan a \xe9l."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Si la lista no est\xe1 vac\xeda:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Se crea un nuevo nodo."}),"\n",(0,t.jsxs)(n.li,{children:["Se enlaza el puntero ",(0,t.jsx)(n.code,{children:"next"})," del ",(0,t.jsx)(n.code,{children:"tail"})," actual al nuevo nodo."]}),"\n",(0,t.jsxs)(n.li,{children:["Se enlaza el puntero ",(0,t.jsx)(n.code,{children:"prev"})," del nuevo nodo al ",(0,t.jsx)(n.code,{children:"tail"})," actual."]}),"\n",(0,t.jsxs)(n.li,{children:["Se actualiza el ",(0,t.jsx)(n.code,{children:"tail"})," para que apunte al nuevo nodo."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"insertar-en-una-posici\xf3n-especifica",children:"Insertar en una posici\xf3n especifica"}),"\n",(0,t.jsx)(n.mermaid,{value:'flowchart TD\n    A["Inicio: insertAtPosition(pos, data)"] --\x3e B{"\xbfLa lista est\xe1 vac\xeda? (head == null)"}\n    B -- S\xed --\x3e C["Crear nuevo nodo con el dato"]\n    C --\x3e D["Asignar head y tail al nuevo nodo"]\n    D --\x3e Z["Fin"]\n\n    B -- No --\x3e E{"pos <= 0?"}\n    E -- S\xed --\x3e F["Llamar a insertAtBeginning(data)"]\n    F --\x3e Z["Fin"]\n\n    E -- No --\x3e G{"pos >= tama\xf1o de la lista?"}\n    G -- S\xed --\x3e H["Llamar a insertAtEnd(data)"]\n    H --\x3e Z["Fin"]\n\n    G -- No --\x3e I["Crear nuevo nodo con el dato"]\n    I --\x3e J["Recorrer desde head hasta posici\xf3n pos-1"]\n    J --\x3e K["Enlazar nuevoNodo.next = current.next"]\n    K --\x3e L["Enlazar nuevoNodo.prev = current"]\n    L --\x3e M["Enlazar current.next.prev = nuevoNodo"]\n    M --\x3e N["Enlazar current.next = nuevoNodo"]\n    N --\x3e Z["Fin"]'}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Lista vac\xeda:"})," Si la lista est\xe1 vac\xeda (",(0,t.jsx)(n.code,{children:"head == null"}),"), se crea un nodo y se asigna como ",(0,t.jsx)(n.code,{children:"head"})," y ",(0,t.jsx)(n.code,{children:"tail"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Posici\xf3n inicial:"})," Si ",(0,t.jsx)(n.code,{children:"pos <= 0"}),", se llama a ",(0,t.jsx)(n.code,{children:"insertAtBeginning(data)"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Posici\xf3n al final o m\xe1s grande que el tama\xf1o:"})," Si ",(0,t.jsx)(n.code,{children:"pos >= tama\xf1o"}),", se llama a ",(0,t.jsx)(n.code,{children:"insertAtEnd(data)"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Posici\xf3n intermedia:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Se recorre la lista hasta llegar a la posici\xf3n anterior a ",(0,t.jsx)(n.code,{children:"pos"})," (",(0,t.jsx)(n.code,{children:"pos-1"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:["Se enlaza el nuevo nodo entre el nodo actual (",(0,t.jsx)(n.code,{children:"current"}),") y el siguiente."]}),"\n",(0,t.jsxs)(n.li,{children:["Se actualizan los punteros ",(0,t.jsx)(n.code,{children:"next"})," y ",(0,t.jsx)(n.code,{children:"prev"})," de los nodos vecinos."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"eliminaci\xf3n",children:"Eliminaci\xf3n"}),"\n",(0,t.jsx)(n.mermaid,{value:'flowchart TD\n    A["Inicio: delete(data)"] --\x3e B{"\xbfLa lista est\xe1 vac\xeda? (head == null)"}\n    B -- S\xed --\x3e Z["No hay nada que eliminar. Fin"]\n\n    B -- No --\x3e C{"\xbfEl nodo head contiene el dato?"}\n    C -- S\xed --\x3e D{"\xbfhead == tail? (\xbfsolo un nodo?)"}\n    D -- S\xed --\x3e E["head = tail = null"]\n    E --\x3e Z["Fin"]\n    D -- No --\x3e F["head = head.next"]\n    F --\x3e G["head.prev = null"]\n    G --\x3e Z["Fin"]\n\n    C -- No --\x3e H["Crear puntero current = head.next"]\n    H --\x3e I{"current != null"}\n    I -- No --\x3e Z["Dato no encontrado. Fin"]\n    \n    I -- S\xed --\x3e J{"current.data == data"}\n    J -- No --\x3e H2["Mover current = current.next"]\n    H2 --\x3e I\n\n    J -- S\xed --\x3e K{"\xbfcurrent == tail?"}\n    K -- S\xed --\x3e L["tail = tail.prev"]\n    L --\x3e M["tail.next = null"]\n    M --\x3e Z["Fin"]\n\n    K -- No --\x3e N["current.prev.next = current.next"]\n    N --\x3e O["current.next.prev = current.prev"]\n    O --\x3e Z["Fin"]'}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Lista vac\xeda:"})," Si ",(0,t.jsx)(n.code,{children:"head == null"}),", no hay nada que eliminar."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Eliminar la cabeza:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Si el primer nodo contiene el dato:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Si es el \xfanico nodo (",(0,t.jsx)(n.code,{children:"head == tail"}),"), se deja la lista vac\xeda (",(0,t.jsx)(n.code,{children:"head = tail = null"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:["Si hay m\xe1s nodos, se mueve la cabeza al siguiente y se elimina el enlace al nodo previo (",(0,t.jsx)(n.code,{children:"head.prev = null"}),")."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Buscar el nodo:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Se recorre la lista desde ",(0,t.jsx)(n.code,{children:"head.next"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Si no se encuentra el dato, la funci\xf3n termina."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Eliminar el nodo encontrado:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Si el nodo es el ",(0,t.jsx)(n.code,{children:"tail"}),", se mueve la cola hacia atr\xe1s y se elimina el enlace al siguiente (",(0,t.jsx)(n.code,{children:"tail.next = null"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:["Si est\xe1 en el medio, se saltan los enlaces:","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"current.prev.next = current.next"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"current.next.prev = current.prev"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"ejemplo-t\xe9cnico",children:"Ejemplo T\xe9cnico"}),"\n","\n",(0,t.jsxs)(l.A,{children:[(0,t.jsx)(s.A,{value:"java",label:"Paradigma:",children:(0,t.jsxs)(l.A,{children:[(0,t.jsxs)(s.A,{value:"code",label:"C\xf3digo Java Ejemplo",children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="DNode.java" showLineNumbers',children:"/**\n * Node for doubly linked list\n */\nclass DNode<T> {\n    private T data;\n    private DNode<T> next;\n    private DNode<T> prev;\n\n    public DNode(T data) {\n        this.data = data;\n        this.next = null;\n        this.prev = null;\n    }\n\n    public T getData() { return data; }\n    public void setNext(DNode<T> next) { this.next = next; }\n    public DNode<T> getNext() { return next; }\n    public void setPrev(DNode<T> prev) { this.prev = prev; }\n    public DNode<T> getPrev() { return prev; }\n}\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="DoublyLinkedList.java" showLineNumbers',children:'/**\n * Doubly linked list implementation\n */\npublic class DoublyLinkedList<T> {\n    private DNode<T> head;\n    private DNode<T> tail;\n    private int size = 0;\n\n    public void insertAtBeginning(T data) {\n        DNode<T> newNode = new DNode<>(data);\n        if (head == null) {\n            head = tail = newNode;\n        } else {\n            newNode.setNext(head);\n            head.setPrev(newNode);\n            head = newNode;\n        }\n        size++;\n    }\n\n    public void insertAtEnd(T data) {\n        DNode<T> newNode = new DNode<>(data);\n        if (tail == null) {\n            head = tail = newNode;\n        } else {\n            tail.setNext(newNode);\n            newNode.setPrev(tail);\n            tail = newNode;\n        }\n        size++;\n    }\n\n    public void insertAtPosition(int index, T data) {\n        if (index <= 0) {\n            insertAtBeginning(data);\n            return;\n        }\n        if (index >= size) {\n            insertAtEnd(data);\n            return;\n        }\n        DNode<T> current = head;\n        for (int i = 0; i < index - 1; i++) {\n            current = current.getNext();\n        }\n        DNode<T> newNode = new DNode<>(data);\n        newNode.setNext(current.getNext());\n        newNode.setPrev(current);\n        current.getNext().setPrev(newNode);\n        current.setNext(newNode);\n        size++;\n    }\n\n    public boolean delete(T data) {\n        if (head == null) return false;\n\n        if (head.getData().equals(data)) {\n            head = head.getNext();\n            if (head != null) head.setPrev(null);\n            else tail = null;\n            size--;\n            return true;\n        }\n\n        DNode<T> current = head;\n        while (current != null) {\n            if (current.getData().equals(data)) {\n                if (current.getNext() != null)\n                    current.getNext().setPrev(current.getPrev());\n                else tail = current.getPrev();\n\n                if (current.getPrev() != null)\n                    current.getPrev().setNext(current.getNext());\n                size--;\n                return true;\n            }\n            current = current.getNext();\n        }\n        return false;\n    }\n\n    public int length() { return size; }\n\n    public String printForward() {\n        StringBuilder sb = new StringBuilder();\n        DNode<T> current = head;\n        while (current != null) {\n            sb.append(current.getData()).append(" <-> ");\n            current = current.getNext();\n        }\n        return sb.append("null").toString();\n    }\n\n    public String printBackward() {\n        StringBuilder sb = new StringBuilder();\n        DNode<T> current = tail;\n        while (current != null) {\n            sb.append(current.getData()).append(" <-> ");\n            current = current.getPrev();\n        }\n        return sb.append("null").toString();\n    }\n}\n'})})]}),(0,t.jsx)(s.A,{value:"test",label:"Test Unitario",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:"showLineNumbers",children:'import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DoublyLinkedListTest {\n    @Test\n    void testInsertAtBeginningAndEnd() {\n        DoublyLinkedList<Integer> list = new DoublyLinkedList<>();\n        list.insertAtBeginning(2);\n        list.insertAtEnd(3);\n        list.insertAtBeginning(1);\n        assertEquals("1 <-> 2 <-> 3 <-> null", list.printForward());\n    }\n}\n'})})})]})}),(0,t.jsx)(s.A,{value:"python",label:"Paradigma: Procedural",children:(0,t.jsxs)(l.A,{children:[(0,t.jsx)(s.A,{value:"code",label:"C\xf3digo Python Ejemplo",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'class DNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\n# Insertar al inicio\ndef insert_at_beginning(head, tail, data):\n    new_node = DNode(data)\n    if head is None:\n        head = tail = new_node\n    else:\n        new_node.next = head\n        head.prev = new_node\n        head = new_node\n    return head, tail\n\n# Insertar al final\ndef insert_at_end(head, tail, data):\n    new_node = DNode(data)\n    if tail is None:\n        head = tail = new_node\n    else:\n        tail.next = new_node\n        new_node.prev = tail\n        tail = new_node\n    return head, tail\n\n# Insertar en una posici\xf3n espec\xedfica\ndef insert_at_position(head, tail, index, data):\n    if index <= 0:\n        return insert_at_beginning(head, tail, data)\n\n    current = head\n    count = 0\n    while current and count < index - 1:\n        current = current.next\n        count += 1\n\n    if current is None or current.next is None:\n        return insert_at_end(head, tail, data)\n\n    new_node = DNode(data)\n    new_node.next = current.next\n    new_node.prev = current\n    current.next.prev = new_node\n    current.next = new_node\n    return head, tail\n\n# Eliminar un nodo por valor\ndef delete_node(head, tail, data):\n    current = head\n    while current:\n        if current.data == data:\n            if current.prev:\n                current.prev.next = current.next\n            else:\n                head = current.next\n\n            if current.next:\n                current.next.prev = current.prev\n            else:\n                tail = current.prev\n            return head, tail, True\n        current = current.next\n    return head, tail, False\n\n# Calcular longitud\ndef length(head):\n    count = 0\n    current = head\n    while current:\n        count += 1\n        current = current.next\n    return count\n\n# Imprimir en orden\ndef print_forward(head):\n    result = ""\n    current = head\n    while current:\n        result += f"{current.data} <-> "\n        current = current.next\n    return result + "None"\n\n# Imprimir en orden inverso\ndef print_backward(tail):\n    result = ""\n    current = tail\n    while current:\n        result += f"{current.data} <-> "\n        current = current.prev\n    return result + "None"\n'})})}),(0,t.jsx)(s.A,{value:"test",label:"Test Unitario",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'from doubly_linked_list import insert_at_beginning, insert_at_end, print_forward\n\ndef test_insert():\n    head, tail = None, None\n    head, tail = insert_at_beginning(head, tail, 2)\n    head, tail = insert_at_end(head, tail, 3)\n    head, tail = insert_at_beginning(head, tail, 1)\n    assert print_forward(head) == "1 <-> 2 <-> 3 <-> None"\n'})})})]})}),(0,t.jsx)(s.A,{value:"ts",label:"Paradigma: Funcional",children:(0,t.jsxs)(l.A,{children:[(0,t.jsx)(s.A,{value:"code",label:"C\xf3digo TS Ejemplo",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'export type DNode<T> = {\n  data: T;\n  next: DNode<T> | null;\n  prev: DNode<T> | null;\n};\n\n// Insertar al inicio\nexport const insertAtBeginning = <T>(\n  head: DNode<T> | null,\n  tail: DNode<T> | null,\n  data: T\n): { head: DNode<T>; tail: DNode<T> } => {\n  const newNode: DNode<T> = { data, next: head, prev: null };\n\n  if (!head) {\n    return { head: newNode, tail: newNode };\n  }\n\n  head.prev = newNode;\n  return { head: newNode, tail: tail! };\n};\n\n// Insertar al final\nexport const insertAtEnd = <T>(\n  head: DNode<T> | null,\n  tail: DNode<T> | null,\n  data: T\n): { head: DNode<T>; tail: DNode<T> } => {\n  const newNode: DNode<T> = { data, next: null, prev: tail };\n\n  if (!tail) {\n    return { head: newNode, tail: newNode };\n  }\n\n  tail.next = newNode;\n  return { head: head!, tail: newNode };\n};\n\n// Insertar en una posici\xf3n espec\xedfica\nexport const insertAtPosition = <T>(\n  head: DNode<T> | null,\n  tail: DNode<T> | null,\n  index: number,\n  data: T\n): { head: DNode<T>; tail: DNode<T> } => {\n  if (index <= 0 || !head) {\n    return insertAtBeginning(head, tail, data);\n  }\n\n  let current = head;\n  let i = 0;\n  while (current.next && i < index - 1) {\n    current = current.next;\n    i++;\n  }\n\n  if (!current.next) {\n    return insertAtEnd(head, tail, data);\n  }\n\n  const newNode: DNode<T> = { data, next: current.next, prev: current };\n  current.next.prev = newNode;\n  current.next = newNode;\n\n  return { head, tail: tail! };\n};\n\n// Eliminar un nodo por valor\nexport const deleteNode = <T>(\n  head: DNode<T> | null,\n  tail: DNode<T> | null,\n  data: T\n): { head: DNode<T> | null; tail: DNode<T> | null; deleted: boolean } => {\n  let current = head;\n\n  while (current) {\n    if (current.data === data) {\n      if (current.prev) {\n        current.prev.next = current.next;\n      } else {\n        head = current.next;\n      }\n\n      if (current.next) {\n        current.next.prev = current.prev;\n      } else {\n        tail = current.prev;\n      }\n\n      return { head, tail, deleted: true };\n    }\n    current = current.next;\n  }\n\n  return { head, tail, deleted: false };\n};\n\n// Calcular longitud\nexport const length = <T>(head: DNode<T> | null): number => {\n  let count = 0;\n  let current = head;\n  while (current) {\n    count++;\n    current = current.next;\n  }\n  return count;\n};\n\n// Imprimir en orden\nexport const printForward = <T>(head: DNode<T> | null): string => {\n  let result = "";\n  let current = head;\n  while (current) {\n    result += `${current.data} <-> `;\n    current = current.next;\n  }\n  return result + "null";\n};\n\n// Imprimir en orden inverso\nexport const printBackward = <T>(tail: DNode<T> | null): string => {\n  let result = "";\n  let current = tail;\n  while (current) {\n    result += `${current.data} <-> `;\n    current = current.prev;\n  }\n  return result + "null";\n};\n'})})}),(0,t.jsx)(s.A,{value:"test",label:"Test Unitario",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'import { insertAtBeginning, insertAtEnd, printForward, DNode } from "./doublyLinkedList";\n\ntest("insert doubly linked list", () => {\n  let head: DNode<number> | null = null;\n  let tail: DNode<number> | null = null;\n\n  ({ head, tail } = insertAtBeginning(head, tail, 2));\n  ({ head, tail } = insertAtEnd(head, tail, 3));\n  ({ head, tail } = insertAtBeginning(head, tail, 1));\n\n  expect(printForward(head)).toBe("1 <-> 2 <-> 3 <-> null");\n});\n'})})})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"aplicaciones-pr\xe1cticas",children:"Aplicaciones Pr\xe1cticas"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Navegadores web:"})," Botones de atr\xe1s y adelante en el historial de navegaci\xf3n."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Edici\xf3n de texto:"})," Implementaci\xf3n de cursores que se mueven en ambas direcciones."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sistemas de archivos:"})," Permite recorrer directorios hacia adelante y atr\xe1s."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Algoritmos de cach\xe9 (LRU):"})," Eliminaci\xf3n r\xe1pida de nodos en ambas direcciones."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Cormen, T. H., Leiserson, C. E., Rivest, R. L., & Stein, C. (2022). Introduction to Algorithms (4th ed.). MIT Press."}),"\n",(0,t.jsx)(n.li,{children:"Weiss, M. A. (2020). Data Structures and Algorithm Analysis in Java (4th ed.). Pearson."}),"\n",(0,t.jsx)(n.li,{children:"McDowell, G. (2016). Cracking the Coding Interview. CareerCup."}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.python.org/3/tutorial",children:"Python 3"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://jestjs.io/docs/getting-started",children:"Jest"})}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>s});var r=a(6540);const t={},i=r.createContext(t);function l(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:n},e.children)}},9365:(e,n,a)=>{a.d(n,{A:()=>l});a(6540);var r=a(4164);const t={tabItem:"tabItem_Ymn6"};var i=a(4848);function l({children:e,hidden:n,className:a}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(t.tabItem,a),hidden:n,children:e})}}}]);