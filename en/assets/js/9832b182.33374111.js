"use strict";(self.webpackChunkdata_structures=self.webpackChunkdata_structures||[]).push([[7470],{1470:(e,n,a)=>{a.d(n,{A:()=>_});var s=a(6540),r=a(4164),i=a(3104),l=a(6347),t=a(205),d=a(7485),c=a(1682),o=a(679);function u(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:a}=e;return(0,s.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:a,default:s}})=>({value:e,label:n,attributes:a,default:s}))}(a);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,a])}function x({value:e,tabValues:n}){return n.some(n=>n.value===e)}function m({queryString:e=!1,groupId:n}){const a=(0,l.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,d.aZ)(r),(0,s.useCallback)(e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})},[r,a])]}function j(e){const{defaultValue:n,queryString:a=!1,groupId:r}=e,i=h(e),[l,d]=(0,s.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!x({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=n.find(e=>e.default)??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i})),[c,u]=m({queryString:a,groupId:r}),[j,p]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[a,r]=(0,o.Dv)(n);return[a,(0,s.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:r}),g=(()=>{const e=c??j;return x({value:e,tabValues:i})?e:null})();(0,t.A)(()=>{g&&d(g)},[g]);return{selectedValue:l,selectValue:(0,s.useCallback)(e=>{if(!x({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),p(e)},[u,p,i]),tabValues:i}}var p=a(2303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=a(4848);function f({className:e,block:n,selectedValue:a,selectValue:s,tabValues:l}){const t=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),c=e=>{const n=e.currentTarget,r=t.indexOf(n),i=l[r].value;i!==a&&(d(n),s(i))},o=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=t.indexOf(e.currentTarget)+1;n=t[a]??t[0];break}case"ArrowLeft":{const a=t.indexOf(e.currentTarget)-1;n=t[a]??t[t.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},e),children:l.map(({value:e,label:n,attributes:s})=>(0,v.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:e=>{t.push(e)},onKeyDown:o,onClick:c,...s,className:(0,r.A)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":a===e}),children:n??e},e))})}function N({lazy:e,children:n,selectedValue:a}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find(e=>e.props.value===a);return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:i.map((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a}))})}function b(e){const n=j(e);return(0,v.jsxs)("div",{className:(0,r.A)("tabs-container",g.tabList),children:[(0,v.jsx)(f,{...n,...e}),(0,v.jsx)(N,{...n,...e})]})}function _(e){const n=(0,p.A)();return(0,v.jsx)(b,{...e,children:u(e.children)},String(n))}},6126:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>x,frontMatter:()=>d,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"linear_structures_and_use_of_nodes/singly_linked_list","title":"Lista Enlazada Simple","description":"Una lista enlazada simple (Singly Linked List) es una estructura de datos lineal y din\xe1mica en la que los elementos (llamados nodos) se enlazan uno tras otro mediante referencias. A diferencia de los arreglos o vectores, sus elementos no se almacenan de forma contigua en memoria, sino que cada nodo guarda la ubicaci\xf3n del siguiente.","source":"@site/docs/04_linear_structures_and_use_of_nodes/02_singly_linked_list.md","sourceDirName":"04_linear_structures_and_use_of_nodes","slug":"/linear_structures_and_use_of_nodes/singly_linked_list","permalink":"/Data_Structures/en/docs/linear_structures_and_use_of_nodes/singly_linked_list","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/04_linear_structures_and_use_of_nodes/02_singly_linked_list.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar-position":2},"sidebar":"tutorialSidebar","previous":{"title":"Nodos y Punteros","permalink":"/Data_Structures/en/docs/linear_structures_and_use_of_nodes/nodes_and_pointers"},"next":{"title":"Lista Enlazada Doble","permalink":"/Data_Structures/en/docs/linear_structures_and_use_of_nodes/doubly_linked_list"}}');var r=a(4848),i=a(8453),l=a(1470),t=a(9365);const d={"sidebar-position":2},c="Lista Enlazada Simple",o={},u=[{value:"Caracter\xedsticas principales",id:"caracter\xedsticas-principales",level:2},{value:"Ventajas",id:"ventajas",level:2},{value:"Desventajas",id:"desventajas",level:2},{value:"Complejidad de operaciones b\xe1sicas",id:"complejidad-de-operaciones-b\xe1sicas",level:2},{value:"Representaci\xf3n visual",id:"representaci\xf3n-visual",level:2},{value:"Flujo de acciones",id:"flujo-de-acciones",level:2},{value:"Inserci\xf3n al inicio",id:"inserci\xf3n-al-inicio",level:3},{value:"Inserci\xf3n al final",id:"inserci\xf3n-al-final",level:3},{value:"Eliminaci\xf3n",id:"eliminaci\xf3n",level:3},{value:"Imprimir lista",id:"imprimir-lista",level:3},{value:"Ejemplo de implementaci\xf3n",id:"ejemplo-de-implementaci\xf3n",level:2},{value:"M\xe9todos \xfatiles adicionales",id:"m\xe9todos-\xfatiles-adicionales",level:2},{value:"Aplicaciones pr\xe1cticas",id:"aplicaciones-pr\xe1cticas",level:2},{value:"Buenas pr\xe1cticas",id:"buenas-pr\xe1cticas",level:2},{value:"Referencias",id:"referencias",level:2}];function h(e){const n={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",math:"math",mermaid:"mermaid",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"lista-enlazada-simple",children:"Lista Enlazada Simple"})}),"\n",(0,r.jsxs)(n.p,{children:["Una ",(0,r.jsx)(n.strong,{children:"lista enlazada simple"})," (",(0,r.jsx)(n.strong,{children:"Singly Linked List"}),") es una ",(0,r.jsx)(n.strong,{children:"estructura de datos lineal y din\xe1mica"})," en la que los elementos (llamados ",(0,r.jsx)(n.strong,{children:"nodos"}),") se enlazan uno tras otro mediante referencias. A diferencia de los arreglos o vectores, sus elementos ",(0,r.jsx)(n.strong,{children:"no se almacenan de forma contigua en memoria"}),", sino que cada nodo guarda la ubicaci\xf3n del siguiente."]}),"\n",(0,r.jsx)(n.h2,{id:"caracter\xedsticas-principales",children:"Caracter\xedsticas principales"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Cada nodo contiene:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Un ",(0,r.jsx)(n.strong,{children:"dato"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Una ",(0,r.jsx)(n.strong,{children:"referencia"})," (o puntero) al siguiente nodo de la lista."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["La lista tiene un \xfanico punto de entrada llamado ",(0,r.jsx)(n.strong,{children:"cabeza (head)"}),", que apunta al primer nodo."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["El \xfaltimo nodo apunta a ",(0,r.jsx)(n.code,{children:"null"})," o ",(0,r.jsx)(n.code,{children:"None"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Su tama\xf1o es ",(0,r.jsx)(n.strong,{children:"din\xe1mico"}),", puede crecer o reducirse f\xe1cilmente."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"ventajas",children:"Ventajas"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Inserci\xf3n y eliminaci\xf3n eficientes en posiciones espec\xedficas (al inicio, por ejemplo) sin necesidad de desplazar elementos."}),"\n",(0,r.jsx)(n.li,{children:"Uso din\xe1mico de memoria."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"desventajas",children:"Desventajas"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["No permite acceso directo a posiciones (como los arreglos): para acceder a un elemento en la posici\xf3n ",(0,r.jsx)(n.code,{children:"i"})," se requiere recorrer la lista desde el inicio."]}),"\n",(0,r.jsx)(n.li,{children:"Requiere memoria adicional para almacenar referencias."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"complejidad-de-operaciones-b\xe1sicas",children:"Complejidad de operaciones b\xe1sicas"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Funcionalidad"}),(0,r.jsx)(n.th,{children:"Complejidad Big-O"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Acceso"}),(0,r.jsx)(n.td,{children:(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mi,{children:"O"}),(0,r.jsx)(n.mo,{stretchy:"false",children:"("}),(0,r.jsx)(n.mi,{children:"n"}),(0,r.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(n.span,{className:"mopen",children:"("}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(n.span,{className:"mclose",children:")"})]})})]})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Inserci\xf3n al inicio"}),(0,r.jsx)(n.td,{children:(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mi,{children:"O"}),(0,r.jsx)(n.mo,{stretchy:"false",children:"("}),(0,r.jsx)(n.mn,{children:"1"}),(0,r.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(1)"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(n.span,{className:"mopen",children:"("}),(0,r.jsx)(n.span,{className:"mord",children:"1"}),(0,r.jsx)(n.span,{className:"mclose",children:")"})]})})]})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Inserci\xf3n al final"}),(0,r.jsx)(n.td,{children:(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mi,{children:"O"}),(0,r.jsx)(n.mo,{stretchy:"false",children:"("}),(0,r.jsx)(n.mi,{children:"n"}),(0,r.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(n.span,{className:"mopen",children:"("}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(n.span,{className:"mclose",children:")"})]})})]})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Eliminaci\xf3n por valor"}),(0,r.jsx)(n.td,{children:(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mi,{children:"O"}),(0,r.jsx)(n.mo,{stretchy:"false",children:"("}),(0,r.jsx)(n.mi,{children:"n"}),(0,r.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(n.span,{className:"mopen",children:"("}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(n.span,{className:"mclose",children:")"})]})})]})})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"representaci\xf3n-visual",children:"Representaci\xf3n visual"}),"\n",(0,r.jsx)(n.mermaid,{value:"graph LR\n    A((Head)) --\x3e B[Node1: data, next]\n    B --\x3e C[Node2: data, next]\n    C --\x3e D[Node3: data, next]\n    D --\x3e E[null]"}),"\n",(0,r.jsx)(n.h2,{id:"flujo-de-acciones",children:"Flujo de acciones"}),"\n",(0,r.jsx)(n.h3,{id:"inserci\xf3n-al-inicio",children:"Inserci\xf3n al inicio"}),"\n",(0,r.jsx)(n.mermaid,{value:'flowchart TD\n    A["Inicio: insertAtBeginning(data)"] --\x3e B{\xbfLa lista est\xe1 vac\xeda?}\n    B -- S\xed --\x3e C["Crear un nuevo nodo con el dato"]\n    C --\x3e D["Asignar el nuevo nodo como la cabeza (head)"]\n    D --\x3e G["Fin"]\n\n    B -- No --\x3e E["Crear un nuevo nodo con el dato"]\n    E --\x3e F["Enlazar el nuevo nodo al nodo actual de la cabeza"]\n    F --\x3e H["Actualizar la cabeza para que apunte al nuevo nodo"]\n    H --\x3e G["Fin"]'}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Verificar si la lista est\xe1 vac\xeda:"})," Se revisa si ",(0,r.jsx)(n.code,{children:"head"})," es ",(0,r.jsx)(n.code,{children:"null"})," o ",(0,r.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Caso lista vac\xeda:"})," Si la lista no tiene elementos, el nuevo nodo se convierte en la cabeza (",(0,r.jsx)(n.code,{children:"head"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Caso lista con elementos:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Crear un nuevo nodo con el dato."}),"\n",(0,r.jsx)(n.li,{children:"Enlazar su atributo next al nodo que actualmente es la cabeza."}),"\n",(0,r.jsxs)(n.li,{children:["Actualizar la referencia de ",(0,r.jsx)(n.code,{children:"head"})," para que ahora apunte al nuevo nodo."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"inserci\xf3n-al-final",children:"Inserci\xf3n al final"}),"\n",(0,r.jsx)(n.mermaid,{value:'flowchart TD\n    A["Inicio: insertAtEnd(data)"] --\x3e B["Crear un nuevo nodo con el dato y next = null"]\n    B --\x3e C{"\xbfLa lista est\xe1 vac\xeda? (head == null)"}\n    C -- S\xed --\x3e D["Asignar el nuevo nodo como la cabeza (head)"]\n    D --\x3e G["Fin"]\n\n    C -- No --\x3e E["Colocar un puntero temporal en la cabeza (current = head)"]\n    E --\x3e F{"\xbfcurrent.next es null?"}\n    F -- No --\x3e E2["Mover el puntero temporal al siguiente nodo (current = current.next)"]\n    E2 --\x3e F\n    F -- S\xed --\x3e H["Enlazar el \xfaltimo nodo encontrado al nuevo nodo (current.next = nuevoNodo)"]\n    H --\x3e G["Fin"]'}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Crear nuevo nodo:"})," Se inicializa un nodo con el dato y su referencia ",(0,r.jsx)(n.code,{children:"next"})," como ",(0,r.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Verificar si la lista est\xe1 vac\xeda:"})," Si ",(0,r.jsx)(n.code,{children:"head"})," es ",(0,r.jsx)(n.code,{children:"null"}),", el nuevo nodo se convierte en la cabeza."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Si la lista no est\xe1 vac\xeda:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Se inicializa un puntero temporal en la cabeza (",(0,r.jsx)(n.code,{children:"current = head"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Se recorre la lista hasta encontrar el \xfaltimo nodo (",(0,r.jsx)(n.code,{children:"current.next == null"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Una vez encontrado, se enlaza el \xfaltimo nodo al nuevo (",(0,r.jsx)(n.code,{children:"current.next = nuevoNodo"}),")."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"eliminaci\xf3n",children:"Eliminaci\xf3n"}),"\n",(0,r.jsx)(n.mermaid,{value:'flowchart TD\n    A["Inicio: delete(data)"] --\x3e B{"\xbfLa lista est\xe1 vac\xeda? (head == null)"}\n    B -- S\xed --\x3e Z["No hay nada que eliminar. Fin"]\n\n    B -- No --\x3e C{"\xbfEl nodo head contiene el dato?"}\n    C -- S\xed --\x3e D["Actualizar head = head.next"]\n    D --\x3e Z["Fin"]\n\n    C -- No --\x3e E["Crear puntero temporal current = head"]\n    E --\x3e F{"\xbfcurrent.next es null?"}\n    F -- S\xed --\x3e Z["El elemento no se encontr\xf3. Fin"]\n\n    F -- No --\x3e G{"\xbfcurrent.next.data == data?"}\n    G -- S\xed --\x3e H["Eliminar nodo: current.next = current.next.next"]\n    H --\x3e Z["Fin"]\n\n    G -- No --\x3e I["Mover puntero current = current.next"]\n    I --\x3e F'}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Verificar si la lista est\xe1 vac\xeda:"})," Si ",(0,r.jsx)(n.code,{children:"head"})," es ",(0,r.jsx)(n.code,{children:"null"}),", no hay elementos que eliminar."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Verificar si el primer nodo es el que debe eliminarse:"})," Si el dato est\xe1 en la cabeza, se actualiza ",(0,r.jsx)(n.code,{children:"head"})," al siguiente nodo."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recorrer la lista:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Se coloca un puntero temporal en la cabeza (",(0,r.jsx)(n.code,{children:"current = head"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Se recorre hasta que el siguiente nodo sea ",(0,r.jsx)(n.code,{children:"null"})," (no se encontr\xf3 el dato) o hasta que ",(0,r.jsx)(n.code,{children:"current.next.data == data"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Eliminar el nodo:"})," Si se encuentra el nodo, se \u201csalta\u201d el nodo objetivo actualizando la referencia ",(0,r.jsx)(n.code,{children:"current.next = current.next.next"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"imprimir-lista",children:"Imprimir lista"}),"\n",(0,r.jsx)(n.mermaid,{value:'flowchart TD\n    A["Inicio: printList()"] --\x3e B{"\xbfLa lista est\xe1 vac\xeda? (head == null)"}\n    B -- S\xed --\x3e C["Imprimir "Lista vac\xeda""]\n    C --\x3e Z["Fin"]\n\n    B -- No --\x3e D["Asignar current = head"]\n    D --\x3e E["Inicializar cadena resultado = \'\'"]\n    E --\x3e F{"\xbfcurrent es null?"}\n    F -- S\xed --\x3e H["Imprimir resultado + "null""]\n    H --\x3e Z["Fin"]\n\n    F -- No --\x3e G["Concatenar current.data + \' -> \' en resultado"]\n    G --\x3e I["Avanzar current = current.next"]\n    I --\x3e F'}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Verificar si la lista est\xe1 vac\xeda:"})," Si ",(0,r.jsx)(n.code,{children:"head"})," es ",(0,r.jsx)(n.code,{children:"null"}),', se imprime "Lista vac\xeda" y termina el m\xe9todo.']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recorrer la lista:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Inicializar un puntero current en ",(0,r.jsx)(n.code,{children:"head"})," y una cadena vac\xeda resultado."]}),"\n",(0,r.jsxs)(n.li,{children:["Mientras current no sea ",(0,r.jsx)(n.code,{children:"null"}),", concatenar ",(0,r.jsx)(n.code,{children:"current.data"}),' a la cadena resultado seguido de " -> ".']}),"\n",(0,r.jsxs)(n.li,{children:["Avanzar el puntero a ",(0,r.jsx)(n.code,{children:"current.next"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Finalizar impresi\xf3n:"}),' Al terminar el recorrido, se imprime resultado + "null".']}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"ejemplo-de-implementaci\xf3n",children:"Ejemplo de implementaci\xf3n"}),"\n","\n",(0,r.jsxs)(l.A,{children:[(0,r.jsx)(t.A,{value:"java",label:"Paradigma:",children:(0,r.jsxs)(l.A,{children:[(0,r.jsxs)(t.A,{value:"code",label:"C\xf3digo Java Ejemplo",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Node.java" showLineNumbers',children:"/**\n * Node class representing an element in the singly linked list.\n */\nclass Node<T> {\n    private T data;\n    private Node<T> next;\n\n    public Node(T data) {\n        this.data = data;\n        this.next = null;\n    }\n\n    public T getData() { return data; }\n    public Node<T> getNext() { return next; }\n    public void setNext(Node<T> next) { this.next = next; }\n}\n"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="SinglyLinkedList.java" showLineNumbers',children:'/**\n * Singly linked list implementation.\n */\npublic class SinglyLinkedList<T> {\n    private Node<T> head;\n\n    public void insertAtBeginning(T data) {\n        Node<T> newNode = new Node<>(data);\n        newNode.setNext(head);\n        head = newNode;\n    }\n\n    public void insertAtEnd(T data) {\n        Node<T> newNode = new Node<>(data);\n        if (head == null) {\n            head = newNode;\n            return;\n        }\n        Node<T> current = head;\n        while (current.getNext() != null) {\n            current = current.getNext();\n        }\n        current.setNext(newNode);\n    }\n\n    public boolean delete(T data) {\n        if (head == null) return false;\n\n        if (head.getData().equals(data)) {\n            head = head.getNext();\n            return true;\n        }\n\n        Node<T> current = head;\n        while (current.getNext() != null) {\n            if (current.getNext().getData().equals(data)) {\n                current.setNext(current.getNext().getNext());\n                return true;\n            }\n            current = current.getNext();\n        }\n        return false;\n    }\n\n    public String printList() {\n        StringBuilder sb = new StringBuilder();\n        Node<T> current = head;\n        while (current != null) {\n            sb.append(current.getData()).append(" -> ");\n            current = current.getNext();\n        }\n        return sb.append("null").toString();\n    }\n}\n'})})]}),(0,r.jsx)(t.A,{value:"test",label:"Test Unitario",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"showLineNumbers",children:'import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SinglyLinkedListTest {\n    @Test\n    void testInsertAndDelete() {\n        SinglyLinkedList<Integer> list = new SinglyLinkedList<>();\n        list.insertAtBeginning(1);\n        list.insertAtEnd(2);\n        assertEquals("1 -> 2 -> null", list.printList());\n        list.delete(1);\n        assertEquals("2 -> null", list.printList());\n    }\n}\n'})})})]})}),(0,r.jsx)(t.A,{value:"python",label:"Paradigma: Procedural",children:(0,r.jsxs)(l.A,{children:[(0,r.jsx)(t.A,{value:"code",label:"C\xf3digo Python Ejemplo",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef insert_at_beginning(head, data):\n    new_node = Node(data)\n    new_node.next = head\n    return new_node\n\ndef insert_at_end(head, data):\n    new_node = Node(data)\n    if head is None:\n        return new_node\n    current = head\n    while current.next:\n        current = current.next\n    current.next = new_node\n    return head\n\ndef delete_node(head, data):\n    if head is None:\n        return None\n    if head.data == data:\n        return head.next\n    current = head\n    while current.next:\n        if current.next.data == data:\n            current.next = current.next.next\n            return head\n        current = current.next\n    return head\n\ndef print_list(head):\n    result = ""\n    current = head\n    while current:\n        result += f"{current.data} -> "\n        current = current.next\n    return result + "None"\n'})})}),(0,r.jsx)(t.A,{value:"test",label:"Test Unitario",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'from linked_list import insert_at_beginning, insert_at_end, delete_node, print_list\n\ndef test_linked_list():\n    head = None\n    head = insert_at_beginning(head, 1)\n    head = insert_at_end(head, 2)\n    assert print_list(head) == "1 -> 2 -> None"\n    head = delete_node(head, 1)\n    assert print_list(head) == "2 -> None"\n'})})})]})}),(0,r.jsx)(t.A,{value:"ts",label:"Paradigma: Funcional",children:(0,r.jsxs)(l.A,{children:[(0,r.jsx)(t.A,{value:"code",label:"C\xf3digo TS Ejemplo",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'export type Node<T> = {\n  data: T;\n  next: Node<T> | null;\n};\n\nexport const insertAtBeginning = <T>(\n  head: Node<T> | null,\n  data: T\n): Node<T> => ({ data, next: head });\n\nexport const insertAtEnd = <T>(\n  head: Node<T> | null,\n  data: T\n): Node<T> => {\n  const newNode: Node<T> = { data, next: null };\n  if (!head) return newNode;\n\n  let current = head;\n  while (current.next) current = current.next;\n  current.next = newNode;\n  return head;\n};\n\nexport const deleteNode = <T>(head: Node<T> | null, data: T): Node<T> | null => {\n  if (!head) return null;\n  if (head.data === data) return head.next;\n\n  let current = head;\n  while (current.next) {\n    if (current.next.data === data) {\n      current.next = current.next.next;\n      return head;\n    }\n    current = current.next;\n  }\n  return head;\n};\n\nexport const printList = <T>(head: Node<T> | null): string => {\n  let result = "";\n  let current = head;\n  while (current) {\n    result += `${current.data} -> `;\n    current = current.next;\n  }\n  return result + "null";\n};\n'})})}),(0,r.jsx)(t.A,{value:"test",label:"Test Unitario",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'import { insertAtBeginning, insertAtEnd, deleteNode, printList, Node } from "./linkedList";\n\ntest("linked list operations", () => {\n  let head: Node<number> | null = null;\n  head = insertAtBeginning(head, 1);\n  head = insertAtEnd(head, 2);\n  expect(printList(head)).toBe("1 -> 2 -> null");\n  head = deleteNode(head, 1);\n  expect(printList(head)).toBe("2 -> null");\n});\n'})})})]})})]}),"\n",(0,r.jsx)(n.h2,{id:"m\xe9todos-\xfatiles-adicionales",children:"M\xe9todos \xfatiles adicionales"}),"\n",(0,r.jsx)(n.p,{children:"Las listas enlazadas pueden implementar m\xe1s m\xe9todos, tales como:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"insertAtPosition(pos, data)"}),": Inserta un nodo en una posici\xf3n espec\xedfica."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"deleteAtPosition(pos)"}),": Elimina un nodo en una posici\xf3n determinada."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"search(data)"}),": Busca un nodo que contenga un dato espec\xedfico y devuelve su posici\xf3n."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"length()"}),": Devuelve la cantidad de nodos en la lista."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isEmpty()"}),": Indica si la lista est\xe1 vac\xeda."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getFirst()"}),": Devuelve el dato del primer nodo."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getLast()"}),": Devuelve el dato del \xfaltimo nodo."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"reverse()"}),": Invierte el orden de los nodos de la lista."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"clear()"}),": Elimina todos los nodos de la lista."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"toArray()"}),": Convierte la lista enlazada en un arreglo o lista nativa."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"insertAfter(value, data)"}),": Inserta un nodo despu\xe9s de un nodo con un valor dado."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"insertBefore(value, data)"}),": Inserta un nodo antes de un nodo con un valor dado."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"clone()"}),": Crea una copia de la lista."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hasCycle()"}),": Detecta si la lista tiene un ciclo (usando el algoritmo de tortuga y liebre)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"findMiddle()"}),": Encuentra el nodo que est\xe1 en la posici\xf3n central."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"aplicaciones-pr\xe1cticas",children:"Aplicaciones pr\xe1cticas"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Implementaci\xf3n de Pilas y Colas:"})," La lista enlazada simple es la base de estas estructuras."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Gesti\xf3n de memoria din\xe1mica:"})," En sistemas donde no se conoce el tama\xf1o de los datos de antemano."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Sistemas de reproducci\xf3n de multimedia:"})," Navegar secuencialmente entre canciones o videos."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Algoritmos de grafos:"})," Representar listas de adyacencia."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"buenas-pr\xe1cticas",children:"Buenas pr\xe1cticas"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SRP:"})," ",(0,r.jsx)(n.code,{children:"Node"})," y ",(0,r.jsx)(n.code,{children:"SinglyLinkedList"})," cumplen funciones separadas."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Nombres claros y autoexplicativos:"})," ",(0,r.jsx)(n.code,{children:"insertAtEnd"}),", ",(0,r.jsx)(n.code,{children:"deleteNode"}),", etc."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modularidad:"})," Cada operaci\xf3n est\xe1 implementada en un m\xe9todo independiente."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Separaci\xf3n de responsabilidades:"})," La impresi\xf3n de la lista se hace en un m\xe9todo separado (printList)."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Cormen, T. H., Leiserson, C. E., Rivest, R. L., & Stein, C. (2022). Introduction to Algorithms (4th ed.). MIT Press."}),"\n",(0,r.jsx)(n.li,{children:"Weiss, M. A. (2020). Data Structures and Algorithm Analysis in Java (4th ed.). Pearson."}),"\n",(0,r.jsx)(n.li,{children:"McDowell, G. (2016). Cracking the Coding Interview. CareerCup."}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.python.org/3/tutorial",children:"Python 3"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://jestjs.io/docs/getting-started",children:"Jest"})}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>t});var s=a(6540);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}},9365:(e,n,a)=>{a.d(n,{A:()=>l});a(6540);var s=a(4164);const r={tabItem:"tabItem_Ymn6"};var i=a(4848);function l({children:e,hidden:n,className:a}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,a),hidden:n,children:e})}}}]);