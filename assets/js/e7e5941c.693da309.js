"use strict";(globalThis.webpackChunkdata_structures=globalThis.webpackChunkdata_structures||[]).push([[5130],{1470:(e,n,r)=>{r.d(n,{A:()=>_});var t=r(6540),o=r(4164),i=r(3104),a=r(6347),s=r(205),l=r(7485),d=r(1682),u=r(679);function c(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:r}=e;return(0,t.useMemo)(()=>{const e=n??function(e){return c(e).map(({props:{value:e,label:n,attributes:r,default:t}})=>({value:e,label:n,attributes:r,default:t}))}(r);return function(e){const n=(0,d.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,r])}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}function v({queryString:e=!1,groupId:n}){const r=(0,a.W6)(),o=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(o),(0,t.useCallback)(e=>{if(!o)return;const n=new URLSearchParams(r.location.search);n.set(o,e),r.replace({...r.location,search:n.toString()})},[o,r])]}function f(e){const{defaultValue:n,queryString:r=!1,groupId:o}=e,i=h(e),[a,l]=(0,t.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find(e=>e.default)??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:i})),[d,c]=v({queryString:r,groupId:o}),[f,m]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,o]=(0,u.Dv)(n);return[r,(0,t.useCallback)(e=>{n&&o.set(e)},[n,o])]}({groupId:o}),b=(()=>{const e=d??f;return p({value:e,tabValues:i})?e:null})();(0,s.A)(()=>{b&&l(b)},[b]);return{selectedValue:a,selectValue:(0,t.useCallback)(e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),m(e)},[c,m,i]),tabValues:i}}var m=r(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=r(4848);function j({className:e,block:n,selectedValue:r,selectValue:t,tabValues:a}){const s=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),d=e=>{const n=e.currentTarget,o=s.indexOf(n),i=a[o].value;i!==r&&(l(n),t(i))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=s.indexOf(e.currentTarget)+1;n=s[r]??s[0];break}case"ArrowLeft":{const r=s.indexOf(e.currentTarget)-1;n=s[r]??s[s.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},e),children:a.map(({value:e,label:n,attributes:t})=>(0,x.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{s.push(e)},onKeyDown:u,onClick:d,...t,className:(0,o.A)("tabs__item",b.tabItem,t?.className,{"tabs__item--active":r===e}),children:n??e},e))})}function g({lazy:e,children:n,selectedValue:r}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find(e=>e.props.value===r);return e?(0,t.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:i.map((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==r}))})}function N(e){const n=f(e);return(0,x.jsxs)("div",{className:(0,o.A)("tabs-container",b.tabList),children:[(0,x.jsx)(j,{...n,...e}),(0,x.jsx)(g,{...n,...e})]})}function _(e){const n=(0,m.A)();return(0,x.jsx)(N,{...e,children:c(e.children)},String(n))}},8370:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"nolinear_structures_trees/binary_tree","title":"\xc1rboles Binarios","description":"Un \xe1rbol binario es una estructura de datos jer\xe1rquica donde cada nodo tiene como m\xe1ximo dos hijos, denominados com\xfanmente como:","source":"@site/docs/06_nolinear_structures_trees/02_binary_tree.md","sourceDirName":"06_nolinear_structures_trees","slug":"/nolinear_structures_trees/binary_tree","permalink":"/Data_Structures/docs/nolinear_structures_trees/binary_tree","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/06_nolinear_structures_trees/02_binary_tree.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar-position":2},"sidebar":"tutorialSidebar","previous":{"title":"Definici\xf3n y Representaci\xf3n","permalink":"/Data_Structures/docs/nolinear_structures_trees/definition_and_representation"},"next":{"title":"\xc1rboles Binarios de B\xfasqueda","permalink":"/Data_Structures/docs/nolinear_structures_trees/binary_search_tree_bst"}}');var o=r(4848),i=r(8453),a=r(1470),s=r(9365);const l={"sidebar-position":2},d="\xc1rboles Binarios",u={},c=[{value:"Propiedades del \xe1rbol binario",id:"propiedades-del-\xe1rbol-binario",level:2},{value:"Tipos de recorrido (transversal)",id:"tipos-de-recorrido-transversal",level:2},{value:"Diagrama de clases",id:"diagrama-de-clases",level:2},{value:"Ejemplo t\xe9cnico",id:"ejemplo-t\xe9cnico",level:2},{value:"Aplicaciones Reales",id:"aplicaciones-reales",level:2},{value:"Referencias",id:"referencias",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"\xe1rboles-binarios",children:"\xc1rboles Binarios"})}),"\n",(0,o.jsxs)(n.p,{children:["Un \xe1rbol binario es una ",(0,o.jsx)(n.strong,{children:"estructura de datos jer\xe1rquica"})," donde cada nodo tiene como m\xe1ximo dos hijos, denominados com\xfanmente como:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Hijo izquierdo (left)"}),"\n",(0,o.jsx)(n.li,{children:"Hijo derecho (right)"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Los \xe1rboles binarios son la base para estructuras m\xe1s complejas como \xe1rboles de b\xfasqueda binaria, AVL, Red-Black, heaps, entre otros."}),"\n",(0,o.jsx)(n.h2,{id:"propiedades-del-\xe1rbol-binario",children:"Propiedades del \xe1rbol binario"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Concepto"}),(0,o.jsx)(n.th,{children:"Definici\xf3n"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Altura de un nodo"}),(0,o.jsx)(n.td,{children:"Distancia desde ese nodo hasta la hoja m\xe1s profunda."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Altura del \xe1rbol"}),(0,o.jsx)(n.td,{children:"Altura de la ra\xedz."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Nivel de un nodo"}),(0,o.jsx)(n.td,{children:"N\xfamero de aristas desde la ra\xedz hasta el nodo."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Nodo hoja"}),(0,o.jsx)(n.td,{children:"Nodo sin hijos."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Nodo interno"}),(0,o.jsx)(n.td,{children:"Nodo con al menos un hijo."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"\xc1rbol binario completo"}),(0,o.jsx)(n.td,{children:"Todos los niveles completos excepto el \xfaltimo, que se llena de izquierda a derecha"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"\xc1rbol binario perfecto"}),(0,o.jsx)(n.td,{children:"Todos los niveles completamente llenos."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"\xc1rbol binario lleno"}),(0,o.jsx)(n.td,{children:"Todos los nodos tienen 0 o 2 hijos."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"\xc1rbol binario"}),(0,o.jsx)(n.td,{children:"Altura de sub\xe1rboles difiere como m\xe1ximo en 1."})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"tipos-de-recorrido-transversal",children:"Tipos de recorrido (transversal)"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Tipo"}),(0,o.jsx)(n.th,{children:"Orden"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Inorden"}),(0,o.jsx)(n.td,{children:"Izquierda \u2192 Ra\xedz \u2192 Derecha"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Preorden"}),(0,o.jsx)(n.td,{children:"Ra\xedz \u2192 Izquierda \u2192 Derecha"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Postorden"}),(0,o.jsx)(n.td,{children:"Izquierda \u2192 Derecha \u2192 Ra\xedz"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Por niveles"}),(0,o.jsx)(n.td,{children:"Nivel por nivel (BFS)"})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"diagrama-de-clases",children:"Diagrama de clases"}),"\n",(0,o.jsx)(n.p,{children:"El siguiente diagrama aplica para un \xe1rbol binario b\xe1sico."}),"\n",(0,o.jsx)(n.mermaid,{value:"classDiagram\n    class BinaryNode {\n        +value: any\n        +left: BinaryNode\n        +right: BinaryNode\n        +BinaryNode(value)\n        +insertLeft(node: BinaryNode)\n        +insertRight(node: BinaryNode)\n    }\n\n    class BinaryTree {\n        +root: BinaryNode\n        +BinaryTree()\n        +traverseInOrder(): void\n        +traversePreOrder(): void\n        +traversePostOrder(): void\n    }\n\n    BinaryTree --\x3e BinaryNode"}),"\n",(0,o.jsx)(n.h2,{id:"ejemplo-t\xe9cnico",children:"Ejemplo t\xe9cnico"}),"\n","\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(s.A,{value:"java",label:"Paradigma: Orientado a Objetos",children:(0,o.jsxs)(a.A,{children:[(0,o.jsxs)(s.A,{value:"code",label:"C\xf3digo Java Ejemplo",children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",metastring:'showLineNumbers title="BinaryNode.java"',children:"package domain;\n\npublic class BinaryNode {\n    public int value;\n    public BinaryNode left;\n    public BinaryNode right;\n\n    public BinaryNode(int value) {\n        this.value = value;\n        this.left = null;\n        this.right = null;\n    }\n}\n"})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",metastring:'showLineNumbers title="BinaryTree.java"',children:'package application;\n\nimport domain.BinaryNode;\n\npublic class BinaryTree {\n    public BinaryNode root;\n\n    public void insert(int value) {\n        root = insertRec(root, value);\n    }\n\n    private BinaryNode insertRec(BinaryNode node, int value) {\n        if (node == null) return new BinaryNode(value);\n        if (value < node.value) node.left = insertRec(node.left, value);\n        else if (value > node.value) node.right = insertRec(node.right, value);\n        return node;\n    }\n\n    public boolean search(int value) {\n        return searchRec(root, value);\n    }\n\n    private boolean searchRec(BinaryNode node, int value) {\n        if (node == null) return false;\n        if (node.value == value) return true;\n        return value < node.value ? searchRec(node.left, value) : searchRec(node.right, value);\n    }\n\n    public void inOrder() {\n        inOrderRec(root);\n        System.out.println();\n    }\n\n    private void inOrderRec(BinaryNode node) {\n        if (node != null) {\n            inOrderRec(node.left);\n            System.out.print(node.value + " ");\n            inOrderRec(node.right);\n        }\n    }\n\n    public void preOrder() {\n        preOrderRec(root);\n        System.out.println();\n    }\n\n    private void preOrderRec(BinaryNode node) {\n        if (node != null) {\n            System.out.print(node.value + " ");\n            preOrderRec(node.left);\n            preOrderRec(node.right);\n        }\n    }\n\n    public void postOrder() {\n        postOrderRec(root);\n        System.out.println();\n    }\n\n    private void postOrderRec(BinaryNode node) {\n        if (node != null) {\n            postOrderRec(node.left);\n            postOrderRec(node.right);\n            System.out.print(node.value + " ");\n        }\n    }\n\n    public void delete(int value) {\n        root = deleteRec(root, value);\n    }\n\n    private BinaryNode deleteRec(BinaryNode node, int value) {\n        if (node == null) return null;\n\n        if (value < node.value) {\n            node.left = deleteRec(node.left, value);\n        } else if (value > node.value) {\n            node.right = deleteRec(node.right, value);\n        } else {\n            if (node.left == null) return node.right;\n            if (node.right == null) return node.left;\n\n            BinaryNode minRight = findMin(node.right);\n            node.value = minRight.value;\n            node.right = deleteRec(node.right, minRight.value);\n        }\n        return node;\n    }\n\n    private BinaryNode findMin(BinaryNode node) {\n        while (node.left != null) node = node.left;\n        return node;\n    }\n}\n'})})]}),(0,o.jsx)(s.A,{value:"test",label:"Test Unitario",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",metastring:'showLineNumbers title="BinaryTreeTest.py"',children:"import application.BinaryTree;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n\n    private BinaryTree tree;\n\n    @BeforeEach\n    void setUp() {\n        tree = new BinaryTree();\n        tree.insert(10);\n        tree.insert(5);\n        tree.insert(15);\n        tree.insert(3);\n        tree.insert(7);\n    }\n\n    @Test\n    void testSearchExisting() {\n        assertTrue(tree.search(10));\n        assertTrue(tree.search(3));\n        assertTrue(tree.search(15));\n    }\n\n    @Test\n    void testSearchNonExisting() {\n        assertFalse(tree.search(20));\n        assertFalse(tree.search(0));\n    }\n\n    @Test\n    void testDeleteLeafNode() {\n        tree.delete(3);\n        assertFalse(tree.search(3));\n    }\n\n    @Test\n    void testDeleteNodeWithOneChild() {\n        tree.delete(5); // 5 has one child (7)\n        assertFalse(tree.search(5));\n        assertTrue(tree.search(7));\n    }\n\n    @Test\n    void testDeleteNodeWithTwoChildren() {\n        tree.insert(13);\n        tree.insert(17);\n        tree.delete(15); // 15 has two children\n        assertFalse(tree.search(15));\n        assertTrue(tree.search(13));\n        assertTrue(tree.search(17));\n    }\n}\n"})})})]})}),(0,o.jsx)(s.A,{value:"python",label:"Paradigma: Procedural",children:(0,o.jsxs)(a.A,{children:[(0,o.jsx)(s.A,{value:"code",label:"C\xf3digo Python Ejemplo",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:"def create_node(value):\n    return {\n        'value': value,\n        'left': None,\n        'right': None\n    }\n\ndef insert_node(root, value):\n    if root is None:\n        return create_node(value)\n    if value < root['value']:\n        root['left'] = insert_node(root['left'], value)\n    elif value > root['value']:\n        root['right'] = insert_node(root['right'], value)\n    return root\n\ndef search_node(root, value):\n    if root is None:\n        return False\n    if root['value'] == value:\n        return True\n    elif value < root['value']:\n        return search_node(root['left'], value)\n    else:\n        return search_node(root['right'], value)\n\ndef in_order(root):\n    if root:\n        in_order(root['left'])\n        print(root['value'], end=' ')\n        in_order(root['right'])\n\ndef pre_order(root):\n    if root:\n        print(root['value'], end=' ')\n        pre_order(root['left'])\n        pre_order(root['right'])\n\ndef post_order(root):\n    if root:\n        post_order(root['left'])\n        post_order(root['right'])\n        print(root['value'], end=' ')\n\ndef find_min(root):\n    current = root\n    while current and current['left']:\n        current = current['left']\n    return current\n\ndef delete_node(root, value):\n    if root is None:\n        return root\n    if value < root['value']:\n        root['left'] = delete_node(root['left'], value)\n    elif value > root['value']:\n        root['right'] = delete_node(root['right'], value)\n    else:\n        # Nodo encontrado\n        if root['left'] is None:\n            return root['right']\n        elif root['right'] is None:\n            return root['left']\n        min_node = find_min(root['right'])\n        root['value'] = min_node['value']\n        root['right'] = delete_node(root['right'], min_node['value'])\n    return root\n"})})}),(0,o.jsx)(s.A,{value:"test",label:"Test Unitario",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:"import pytest\nfrom binary_tree import (\n    create_node,\n    insert_node,\n    search_node,\n    delete_node,\n)\n\n@pytest.fixture\ndef sample_tree():\n    root = None\n    for value in [10, 5, 15, 3, 7, 13, 17]:\n        root = insert_node(root, value)\n    return root\n\ndef test_search_existing(sample_tree):\n    assert search_node(sample_tree, 10) is True\n    assert search_node(sample_tree, 7) is True\n    assert search_node(sample_tree, 13) is True\n\ndef test_search_non_existing(sample_tree):\n    assert search_node(sample_tree, 100) is False\n    assert search_node(sample_tree, 0) is False\n\ndef test_delete_leaf_node(sample_tree):\n    root = delete_node(sample_tree, 3)\n    assert search_node(root, 3) is False\n\ndef test_delete_node_with_one_child(sample_tree):\n    root = delete_node(sample_tree, 5)  # 5 has one child (7)\n    assert search_node(root, 5) is False\n    assert search_node(root, 7) is True\n\ndef test_delete_node_with_two_children(sample_tree):\n    root = delete_node(sample_tree, 15)  # 15 has children 13 and 17\n    assert search_node(root, 15) is False\n    assert search_node(root, 13) is True\n    assert search_node(root, 17) is True\n"})})})]})}),(0,o.jsx)(s.A,{value:"typescript",label:"Paradigm: Funcional",children:(0,o.jsxs)(a.A,{children:[(0,o.jsx)(s.A,{value:"code",label:"C\xf3digo Typescript Ejemplo",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"export type BinaryNode = Readonly<{\n  value: number;\n  left: BinaryNode | null;\n  right: BinaryNode | null;\n}>;\n\nexport const createNode = (value: number): BinaryNode => ({\n  value,\n  left: null,\n  right: null,\n});\n\nexport const insertNode = (node: BinaryNode | null, value: number): BinaryNode => {\n  if (!node) return createNode(value);\n\n  if (value < node.value) {\n    return {\n      ...node,\n      left: insertNode(node.left, value),\n    };\n  }\n\n  if (value > node.value) {\n    return {\n      ...node,\n      right: insertNode(node.right, value),\n    };\n  }\n\n  return node; // valores duplicados no se insertan\n};\n\nexport const searchNode = (node: BinaryNode | null, value: number): boolean => {\n  if (!node) return false;\n  if (node.value === value) return true;\n\n  return value < node.value\n    ? searchNode(node.left, value)\n    : searchNode(node.right, value);\n};\n\nexport const inOrder = (node: BinaryNode | null, visit: (value: number) => void): void => {\n  if (!node) return;\n  inOrder(node.left, visit);\n  visit(node.value);\n  inOrder(node.right, visit);\n};\n\nexport const preOrder = (node: BinaryNode | null, visit: (value: number) => void): void => {\n  if (!node) return;\n  visit(node.value);\n  preOrder(node.left, visit);\n  preOrder(node.right, visit);\n};\n\nexport const postOrder = (node: BinaryNode | null, visit: (value: number) => void): void => {\n  if (!node) return;\n  postOrder(node.left, visit);\n  postOrder(node.right, visit);\n  visit(node.value);\n};\n\nexport const findMinNode = (node: BinaryNode): BinaryNode => {\n  let current = node;\n  while (current.left !== null) {\n    current = current.left;\n  }\n  return current;\n};\n\nexport const deleteNode = (node: BinaryNode | null, value: number): BinaryNode | null => {\n  if (!node) return null;\n\n  if (value < node.value) {\n    return {\n      ...node,\n      left: deleteNode(node.left, value),\n    };\n  }\n\n  if (value > node.value) {\n    return {\n      ...node,\n      right: deleteNode(node.right, value),\n    };\n  }\n\n  // Nodo encontrado\n  if (!node.left) return node.right;\n  if (!node.right) return node.left;\n\n  const minRight = findMinNode(node.right);\n  return {\n    ...node,\n    value: minRight.value,\n    right: deleteNode(node.right, minRight.value),\n  };\n};\n"})})}),(0,o.jsx)(s.A,{value:"test",label:"Test Unitario",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'import { describe, it, expect, beforeEach } from "vitest";\nimport {\n  BinaryNode,\n  insertNode,\n  searchNode,\n  deleteNode,\n  inOrder,\n  createNode,\n} from "./binary-tree";\n\ndescribe("Binary Tree - Functional", () => {\n  let tree: BinaryNode | null = null;\n\n  beforeEach(() => {\n    const values = [10, 5, 15, 3, 7, 13, 17];\n    tree = values.reduce(insertNode, null);\n  });\n\n  it("should find existing values", () => {\n    expect(searchNode(tree, 5)).toBe(true);\n    expect(searchNode(tree, 13)).toBe(true);\n    expect(searchNode(tree, 17)).toBe(true);\n  });\n\n  it("should not find non-existing values", () => {\n    expect(searchNode(tree, 99)).toBe(false);\n    expect(searchNode(tree, -1)).toBe(false);\n  });\n\n  it("should delete a leaf node", () => {\n    const updated = deleteNode(tree, 3);\n    expect(searchNode(updated, 3)).toBe(false);\n  });\n\n  it("should delete a node with one child", () => {\n    const updated = deleteNode(tree, 5);\n    expect(searchNode(updated, 5)).toBe(false);\n    expect(searchNode(updated, 7)).toBe(true);\n  });\n\n  it("should delete a node with two children", () => {\n    const updated = deleteNode(tree, 15);\n    expect(searchNode(updated, 15)).toBe(false);\n    expect(searchNode(updated, 13)).toBe(true);\n    expect(searchNode(updated, 17)).toBe(true);\n  });\n\n  it("should perform in-order traversal correctly", () => {\n    const visited: number[] = [];\n    inOrder(tree, (v) => visited.push(v));\n    expect(visited).toEqual([3, 5, 7, 10, 13, 15, 17]);\n  });\n});\n'})})})]})})]}),"\n",(0,o.jsx)(n.h2,{id:"aplicaciones-reales",children:"Aplicaciones Reales"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"\xc1rboles de decisi\xf3n (IA, ML)."}),"\n",(0,o.jsx)(n.li,{children:"\xc1rboles de expresi\xf3n en compiladores."}),"\n",(0,o.jsx)(n.li,{children:"Representaci\xf3n de bases de datos jer\xe1rquicas."}),"\n",(0,o.jsx)(n.li,{children:"Autocompletado y b\xfasqueda."}),"\n",(0,o.jsx)(n.li,{children:"Indexaci\xf3n binaria (BST)."}),"\n",(0,o.jsx)(n.li,{children:"Representaci\xf3n de expresiones matem\xe1ticas."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Cormen, T. H., Leiserson, C. E., Rivest, R. L., & Stein, C. (2022). Introduction to Algorithms (4th ed.). MIT Press."}),"\n",(0,o.jsx)(n.li,{children:"Goodrich, M. T., Tamassia, R., & Goldwasser, M. H. (2014). Data Structures and Algorithms in Java (6th ed.). Wiley."}),"\n",(0,o.jsx)(n.li,{children:"Weiss, M. A. (2020). Data Structures and Algorithm Analysis in Java (4th ed.). Pearson."}),"\n",(0,o.jsx)(n.li,{children:"Sedgewick, R., & Wayne, K. (2011). Algorithms (4th ed.). Addison-Wesley."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var t=r(6540);const o={},i=t.createContext(o);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(i.Provider,{value:n},e.children)}},9365:(e,n,r)=>{r.d(n,{A:()=>a});r(6540);var t=r(4164);const o={tabItem:"tabItem_Ymn6"};var i=r(4848);function a({children:e,hidden:n,className:r}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(o.tabItem,r),hidden:n,children:e})}}}]);