"use strict";(globalThis.webpackChunkdata_structures=globalThis.webpackChunkdata_structures||[]).push([[6398],{1470:(e,n,r)=>{r.d(n,{A:()=>y});var a=r(6540),s=r(4164),t=r(3104),l=r(6347),i=r(205),o=r(7485),d=r(1682),c=r(679);function u(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:r}=e;return(0,a.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:r,default:a}})=>({value:e,label:n,attributes:r,default:a}))}(r);return function(e){const n=(0,d.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,r])}function m({value:e,tabValues:n}){return n.some(n=>n.value===e)}function p({queryString:e=!1,groupId:n}){const r=(0,l.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,o.aZ)(s),(0,a.useCallback)(e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})},[s,r])]}function x(e){const{defaultValue:n,queryString:r=!1,groupId:s}=e,t=h(e),[l,o]=(0,a.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find(e=>e.default)??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:t})),[d,u]=p({queryString:r,groupId:s}),[x,j]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,s]=(0,c.Dv)(n);return[r,(0,a.useCallback)(e=>{n&&s.set(e)},[n,s])]}({groupId:s}),v=(()=>{const e=d??x;return m({value:e,tabValues:t})?e:null})();(0,i.A)(()=>{v&&o(v)},[v]);return{selectedValue:l,selectValue:(0,a.useCallback)(e=>{if(!m({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),j(e)},[u,j,t]),tabValues:t}}var j=r(2303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=r(4848);function N({className:e,block:n,selectedValue:r,selectValue:a,tabValues:l}){const i=[],{blockElementScrollPositionUntilNextRender:o}=(0,t.a_)(),d=e=>{const n=e.currentTarget,s=i.indexOf(n),t=l[s].value;t!==r&&(o(n),a(t))},c=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=i.indexOf(e.currentTarget)+1;n=i[r]??i[0];break}case"ArrowLeft":{const r=i.indexOf(e.currentTarget)-1;n=i[r]??i[i.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:l.map(({value:e,label:n,attributes:a})=>(0,g.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{i.push(e)},onKeyDown:c,onClick:d,...a,className:(0,s.A)("tabs__item",v.tabItem,a?.className,{"tabs__item--active":r===e}),children:n??e},e))})}function f({lazy:e,children:n,selectedValue:r}){const t=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=t.find(e=>e.props.value===r);return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:t.map((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r}))})}function b(e){const n=x(e);return(0,g.jsxs)("div",{className:(0,s.A)("tabs-container",v.tabList),children:[(0,g.jsx)(N,{...n,...e}),(0,g.jsx)(f,{...n,...e})]})}function y(e){const n=(0,j.A)();return(0,g.jsx)(b,{...e,children:u(e.children)},String(n))}},3146:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"nolinear_structures_trees/binary_search_tree_bst","title":"\xc1rboles Binarios de B\xfasqueda","description":"Un \xc1rbol Binario de B\xfasqueda (BST - Binary Search Tree) es una estructura de datos jer\xe1rquica en forma de \xe1rbol binario que mantiene los elementos ordenados para permitir b\xfasquedas, inserciones y eliminaciones eficientes.","source":"@site/docs/06_nolinear_structures_trees/03_binary_search_tree_bst.md","sourceDirName":"06_nolinear_structures_trees","slug":"/nolinear_structures_trees/binary_search_tree_bst","permalink":"/Data_Structures/docs/nolinear_structures_trees/binary_search_tree_bst","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/06_nolinear_structures_trees/03_binary_search_tree_bst.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar-position":2},"sidebar":"tutorialSidebar","previous":{"title":"\xc1rboles Binarios","permalink":"/Data_Structures/docs/nolinear_structures_trees/binary_tree"}}');var s=r(4848),t=r(8453),l=r(1470),i=r(9365);const o={"sidebar-position":2},d="\xc1rboles Binarios de B\xfasqueda",c={},u=[{value:"Complejidades Operacionales",id:"complejidades-operacionales",level:2},{value:"Diagrama de secuencia",id:"diagrama-de-secuencia",level:2},{value:"Inserci\xf3n",id:"inserci\xf3n",level:3},{value:"B\xfasqueda",id:"b\xfasqueda",level:3},{value:"Eliminaci\xf3n",id:"eliminaci\xf3n",level:3},{value:"Ejemplo t\xe9cnico",id:"ejemplo-t\xe9cnico",level:2},{value:"Aplicaciones pr\xe1cticas de los BST",id:"aplicaciones-pr\xe1cticas-de-los-bst",level:2},{value:"Referencias",id:"referencias",level:2}];function h(e){const n={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",math:"math",mermaid:"mermaid",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"\xe1rboles-binarios-de-b\xfasqueda",children:"\xc1rboles Binarios de B\xfasqueda"})}),"\n",(0,s.jsxs)(n.p,{children:["Un ",(0,s.jsx)(n.strong,{children:"\xc1rbol Binario de B\xfasqueda (BST - Binary Search Tree)"})," es una estructura de datos jer\xe1rquica en forma de \xe1rbol binario que mantiene los elementos ",(0,s.jsx)(n.strong,{children:"ordenados"})," para permitir b\xfasquedas, inserciones y eliminaciones eficientes."]}),"\n",(0,s.jsx)(n.p,{children:"Las propiedades clave de un BST son:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Cada nodo tiene como m\xe1ximo ",(0,s.jsx)(n.strong,{children:"dos hijos"}),": izquierdo y derecho."]}),"\n",(0,s.jsxs)(n.li,{children:["Para cualquier nodo ",(0,s.jsx)(n.code,{children:"N"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Todos los elementos en el ",(0,s.jsx)(n.strong,{children:"sub\xe1rbol izquierdo"})," son ",(0,s.jsx)(n.strong,{children:"menores"})," que ",(0,s.jsx)(n.code,{children:"N.value"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Todos los elementos en el ",(0,s.jsx)(n.strong,{children:"sub\xe1rbol derecho"})," son ",(0,s.jsx)(n.strong,{children:"mayores"})," que ",(0,s.jsx)(n.code,{children:"N.value"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"No se permiten elementos duplicados (por convenci\xf3n)."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"complejidades-operacionales",children:"Complejidades Operacionales"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Operaci\xf3n"}),(0,s.jsx)(n.th,{children:"Mejor Caso"}),(0,s.jsx)(n.th,{children:"Promedio"}),(0,s.jsx)(n.th,{children:"Peor Caso (\xe1rbol degenerado)"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"B\xfasqueda"}),(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"O"}),(0,s.jsx)(n.mo,{stretchy:"false",children:"("}),(0,s.jsx)(n.mi,{children:"l"}),(0,s.jsx)(n.mi,{children:"o"}),(0,s.jsx)(n.mi,{children:"g"}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(log n)"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(n.span,{className:"mopen",children:"("}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mclose",children:")"})]})})]})}),(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"O"}),(0,s.jsx)(n.mo,{stretchy:"false",children:"("}),(0,s.jsx)(n.mi,{children:"l"}),(0,s.jsx)(n.mi,{children:"o"}),(0,s.jsx)(n.mi,{children:"g"}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(log n)"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(n.span,{className:"mopen",children:"("}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mclose",children:")"})]})})]})}),(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"O"}),(0,s.jsx)(n.mo,{stretchy:"false",children:"("}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(n.span,{className:"mopen",children:"("}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mclose",children:")"})]})})]})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Inserci\xf3n"}),(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"O"}),(0,s.jsx)(n.mo,{stretchy:"false",children:"("}),(0,s.jsx)(n.mi,{children:"l"}),(0,s.jsx)(n.mi,{children:"o"}),(0,s.jsx)(n.mi,{children:"g"}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(log n)"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(n.span,{className:"mopen",children:"("}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mclose",children:")"})]})})]})}),(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"O"}),(0,s.jsx)(n.mo,{stretchy:"false",children:"("}),(0,s.jsx)(n.mi,{children:"l"}),(0,s.jsx)(n.mi,{children:"o"}),(0,s.jsx)(n.mi,{children:"g"}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(log n)"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(n.span,{className:"mopen",children:"("}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mclose",children:")"})]})})]})}),(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"O"}),(0,s.jsx)(n.mo,{stretchy:"false",children:"("}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(n.span,{className:"mopen",children:"("}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mclose",children:")"})]})})]})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Eliminaci\xf3n"}),(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"O"}),(0,s.jsx)(n.mo,{stretchy:"false",children:"("}),(0,s.jsx)(n.mi,{children:"l"}),(0,s.jsx)(n.mi,{children:"o"}),(0,s.jsx)(n.mi,{children:"g"}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(log n)"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(n.span,{className:"mopen",children:"("}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mclose",children:")"})]})})]})}),(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"O"}),(0,s.jsx)(n.mo,{stretchy:"false",children:"("}),(0,s.jsx)(n.mi,{children:"l"}),(0,s.jsx)(n.mi,{children:"o"}),(0,s.jsx)(n.mi,{children:"g"}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(log n)"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(n.span,{className:"mopen",children:"("}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mclose",children:")"})]})})]})}),(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"O"}),(0,s.jsx)(n.mo,{stretchy:"false",children:"("}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(n.span,{className:"mopen",children:"("}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mclose",children:")"})]})})]})})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"diagrama-de-secuencia",children:"Diagrama de secuencia"}),"\n",(0,s.jsx)(n.h3,{id:"inserci\xf3n",children:"Inserci\xf3n"}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Usuario\n    participant \xc1rbolBST\n    participant NodoActual\n\n    Usuario->>+\xc1rbolBST: insert(value)\n    alt ra\xedz es null\n        \xc1rbolBST--\x3e>\xc1rbolBST: crear nuevo nodo como ra\xedz\n    else ra\xedz no es null\n        \xc1rbolBST->>+NodoActual: insertRec(actual, value)\n        loop Comparaci\xf3n de valor\n            alt value < actual.value\n                NodoActual->>NodoActual: insertRec(actual.left, value)\n            else value > actual.value\n                NodoActual->>NodoActual: insertRec(actual.right, value)\n            else iguales\n                NodoActual--\x3e>NodoActual: no insertar duplicado\n            end\n        end\n        NodoActual--\x3e>-\xc1rbolBST: nodo insertado correctamente\n    end\n    \xc1rbolBST--\x3e>-Usuario: \xc1rbol actualizado"}),"\n",(0,s.jsx)(n.h3,{id:"b\xfasqueda",children:"B\xfasqueda"}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\n    autonumber\n    participant Usuario\n    participant \xc1rbolBST\n    participant NodoActual\n\n    Usuario->>+\xc1rbolBST: search(value)\n    alt ra\xedz es null\n        \xc1rbolBST--\x3e>Usuario: return false\n    else ra\xedz no es null\n        \xc1rbolBST->>+NodoActual: searchRec(actual, value)\n        loop Comparaci\xf3n de valor\n            alt value == actual.value\n                NodoActual--\x3e>-\xc1rbolBST: return true\n            else value < actual.value\n                NodoActual->>NodoActual: searchRec(actual.left, value)\n            else value > actual.value\n                NodoActual->>NodoActual: searchRec(actual.right, value)\n            end\n        end\n        \xc1rbolBST--\x3e>-Usuario: Resultado de b\xfasqueda\n    end"}),"\n",(0,s.jsx)(n.h3,{id:"eliminaci\xf3n",children:"Eliminaci\xf3n"}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\n    autonumber\n    participant Usuario\n    participant \xc1rbolBST\n    participant NodoActual\n    participant Sucesor\n\n    Usuario->>+\xc1rbolBST: delete(value)\n    alt ra\xedz es null\n        \xc1rbolBST--\x3e>Usuario: return null\n    else ra\xedz no es null\n        \xc1rbolBST->>+NodoActual: deleteRec(actual, value)\n\n        loop Comparaci\xf3n\n            alt value < actual.value\n                NodoActual->>NodoActual: deleteRec(actual.left, value)\n            else value > actual.value\n                NodoActual->>NodoActual: deleteRec(actual.right, value)\n            else valor encontrado\n                alt nodo sin hijos\n                    NodoActual--\x3e>\xc1rbolBST: return null\n                else nodo con un hijo\n                    NodoActual--\x3e>\xc1rbolBST: return child\n                else nodo con dos hijos\n                    NodoActual->>+Sucesor: findMin(actual.right)\n                    Sucesor--\x3e>-NodoActual: minValue\n                    NodoActual->>NodoActual: deleteRec(actual.right, minValue)\n                    NodoActual--\x3e>-\xc1rbolBST: actualizar valor y enlaces\n                end\n            end\n        end\n        \xc1rbolBST--\x3e>-Usuario: \xe1rbol actualizado\n    end"}),"\n",(0,s.jsx)(n.h2,{id:"ejemplo-t\xe9cnico",children:"Ejemplo t\xe9cnico"}),"\n","\n",(0,s.jsxs)(l.A,{children:[(0,s.jsx)(i.A,{value:"java",label:"Paradigma: Orientado a Objetos",children:(0,s.jsxs)(l.A,{children:[(0,s.jsxs)(i.A,{value:"code",label:"C\xf3digo Java Ejemplo",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'showLineNumbers title="BinaryNode.java"',children:"package domain;\n\npublic class BinaryNode {\n    public int value;\n    public BinaryNode left;\n    public BinaryNode right;\n\n    public BinaryNode(int value) {\n        this.value = value;\n        this.left = null;\n        this.right = null;\n    }\n}\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'showLineNumbers title="BinaryTree.java"',children:'package application;\n\nimport domain.BinaryNode;\n\npublic class BinaryTree {\n    public BinaryNode root;\n\n    public void insert(int value) {\n        root = insertRec(root, value);\n    }\n\n    private BinaryNode insertRec(BinaryNode node, int value) {\n        if (node == null) return new BinaryNode(value);\n        if (value < node.value) node.left = insertRec(node.left, value);\n        else if (value > node.value) node.right = insertRec(node.right, value);\n        return node;\n    }\n\n    public boolean search(int value) {\n        return searchRec(root, value);\n    }\n\n    private boolean searchRec(BinaryNode node, int value) {\n        if (node == null) return false;\n        if (node.value == value) return true;\n        return value < node.value ? searchRec(node.left, value) : searchRec(node.right, value);\n    }\n\n    public void inOrder() {\n        inOrderRec(root);\n        System.out.println();\n    }\n\n    private void inOrderRec(BinaryNode node) {\n        if (node != null) {\n            inOrderRec(node.left);\n            System.out.print(node.value + " ");\n            inOrderRec(node.right);\n        }\n    }\n\n    public void preOrder() {\n        preOrderRec(root);\n        System.out.println();\n    }\n\n    private void preOrderRec(BinaryNode node) {\n        if (node != null) {\n            System.out.print(node.value + " ");\n            preOrderRec(node.left);\n            preOrderRec(node.right);\n        }\n    }\n\n    public void postOrder() {\n        postOrderRec(root);\n        System.out.println();\n    }\n\n    private void postOrderRec(BinaryNode node) {\n        if (node != null) {\n            postOrderRec(node.left);\n            postOrderRec(node.right);\n            System.out.print(node.value + " ");\n        }\n    }\n\n    public void delete(int value) {\n        root = deleteRec(root, value);\n    }\n\n    private BinaryNode deleteRec(BinaryNode node, int value) {\n        if (node == null) return null;\n\n        if (value < node.value) {\n            node.left = deleteRec(node.left, value);\n        } else if (value > node.value) {\n            node.right = deleteRec(node.right, value);\n        } else {\n            if (node.left == null) return node.right;\n            if (node.right == null) return node.left;\n\n            BinaryNode minRight = findMin(node.right);\n            node.value = minRight.value;\n            node.right = deleteRec(node.right, minRight.value);\n        }\n        return node;\n    }\n\n    private BinaryNode findMin(BinaryNode node) {\n        while (node.left != null) node = node.left;\n        return node;\n    }\n}\n'})})]}),(0,s.jsx)(i.A,{value:"test",label:"Test Unitario",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'showLineNumbers title="BinaryTreeTest.py"',children:"import application.BinaryTree;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BinaryTreeTest {\n\n    private BinaryTree tree;\n\n    @BeforeEach\n    void setUp() {\n        tree = new BinaryTree();\n        tree.insert(10);\n        tree.insert(5);\n        tree.insert(15);\n        tree.insert(3);\n        tree.insert(7);\n    }\n\n    @Test\n    void testSearchExisting() {\n        assertTrue(tree.search(10));\n        assertTrue(tree.search(3));\n        assertTrue(tree.search(15));\n    }\n\n    @Test\n    void testSearchNonExisting() {\n        assertFalse(tree.search(20));\n        assertFalse(tree.search(0));\n    }\n\n    @Test\n    void testDeleteLeafNode() {\n        tree.delete(3);\n        assertFalse(tree.search(3));\n    }\n\n    @Test\n    void testDeleteNodeWithOneChild() {\n        tree.delete(5); // 5 has one child (7)\n        assertFalse(tree.search(5));\n        assertTrue(tree.search(7));\n    }\n\n    @Test\n    void testDeleteNodeWithTwoChildren() {\n        tree.insert(13);\n        tree.insert(17);\n        tree.delete(15); // 15 has two children\n        assertFalse(tree.search(15));\n        assertTrue(tree.search(13));\n        assertTrue(tree.search(17));\n    }\n}\n"})})})]})}),(0,s.jsx)(i.A,{value:"python",label:"Paradigma: Procedural",children:(0,s.jsxs)(l.A,{children:[(0,s.jsx)(i.A,{value:"code",label:"C\xf3digo Python Ejemplo",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:"def create_node(value):\n    return {\n        'value': value,\n        'left': None,\n        'right': None\n    }\n\ndef insert_node(root, value):\n    if root is None:\n        return create_node(value)\n    if value < root['value']:\n        root['left'] = insert_node(root['left'], value)\n    elif value > root['value']:\n        root['right'] = insert_node(root['right'], value)\n    return root\n\ndef search_node(root, value):\n    if root is None:\n        return False\n    if root['value'] == value:\n        return True\n    elif value < root['value']:\n        return search_node(root['left'], value)\n    else:\n        return search_node(root['right'], value)\n\ndef in_order(root):\n    if root:\n        in_order(root['left'])\n        print(root['value'], end=' ')\n        in_order(root['right'])\n\ndef pre_order(root):\n    if root:\n        print(root['value'], end=' ')\n        pre_order(root['left'])\n        pre_order(root['right'])\n\ndef post_order(root):\n    if root:\n        post_order(root['left'])\n        post_order(root['right'])\n        print(root['value'], end=' ')\n\ndef find_min(root):\n    current = root\n    while current and current['left']:\n        current = current['left']\n    return current\n\ndef delete_node(root, value):\n    if root is None:\n        return root\n    if value < root['value']:\n        root['left'] = delete_node(root['left'], value)\n    elif value > root['value']:\n        root['right'] = delete_node(root['right'], value)\n    else:\n        # Nodo encontrado\n        if root['left'] is None:\n            return root['right']\n        elif root['right'] is None:\n            return root['left']\n        min_node = find_min(root['right'])\n        root['value'] = min_node['value']\n        root['right'] = delete_node(root['right'], min_node['value'])\n    return root\n"})})}),(0,s.jsx)(i.A,{value:"test",label:"Test Unitario",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:"import pytest\nfrom binary_tree import (\n    create_node,\n    insert_node,\n    search_node,\n    delete_node,\n)\n\n@pytest.fixture\ndef sample_tree():\n    root = None\n    for value in [10, 5, 15, 3, 7, 13, 17]:\n        root = insert_node(root, value)\n    return root\n\ndef test_search_existing(sample_tree):\n    assert search_node(sample_tree, 10) is True\n    assert search_node(sample_tree, 7) is True\n    assert search_node(sample_tree, 13) is True\n\ndef test_search_non_existing(sample_tree):\n    assert search_node(sample_tree, 100) is False\n    assert search_node(sample_tree, 0) is False\n\ndef test_delete_leaf_node(sample_tree):\n    root = delete_node(sample_tree, 3)\n    assert search_node(root, 3) is False\n\ndef test_delete_node_with_one_child(sample_tree):\n    root = delete_node(sample_tree, 5)  # 5 has one child (7)\n    assert search_node(root, 5) is False\n    assert search_node(root, 7) is True\n\ndef test_delete_node_with_two_children(sample_tree):\n    root = delete_node(sample_tree, 15)  # 15 has children 13 and 17\n    assert search_node(root, 15) is False\n    assert search_node(root, 13) is True\n    assert search_node(root, 17) is True\n"})})})]})}),(0,s.jsx)(i.A,{value:"typescript",label:"Paradigm: Funcional",children:(0,s.jsxs)(l.A,{children:[(0,s.jsx)(i.A,{value:"code",label:"C\xf3digo Typescript Ejemplo",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"export type BinaryNode = Readonly<{\n  value: number;\n  left: BinaryNode | null;\n  right: BinaryNode | null;\n}>;\n\nexport const createNode = (value: number): BinaryNode => ({\n  value,\n  left: null,\n  right: null,\n});\n\nexport const insertNode = (node: BinaryNode | null, value: number): BinaryNode => {\n  if (!node) return createNode(value);\n\n  if (value < node.value) {\n    return {\n      ...node,\n      left: insertNode(node.left, value),\n    };\n  }\n\n  if (value > node.value) {\n    return {\n      ...node,\n      right: insertNode(node.right, value),\n    };\n  }\n\n  return node; // valores duplicados no se insertan\n};\n\nexport const searchNode = (node: BinaryNode | null, value: number): boolean => {\n  if (!node) return false;\n  if (node.value === value) return true;\n\n  return value < node.value\n    ? searchNode(node.left, value)\n    : searchNode(node.right, value);\n};\n\nexport const inOrder = (node: BinaryNode | null, visit: (value: number) => void): void => {\n  if (!node) return;\n  inOrder(node.left, visit);\n  visit(node.value);\n  inOrder(node.right, visit);\n};\n\nexport const preOrder = (node: BinaryNode | null, visit: (value: number) => void): void => {\n  if (!node) return;\n  visit(node.value);\n  preOrder(node.left, visit);\n  preOrder(node.right, visit);\n};\n\nexport const postOrder = (node: BinaryNode | null, visit: (value: number) => void): void => {\n  if (!node) return;\n  postOrder(node.left, visit);\n  postOrder(node.right, visit);\n  visit(node.value);\n};\n\nexport const findMinNode = (node: BinaryNode): BinaryNode => {\n  let current = node;\n  while (current.left !== null) {\n    current = current.left;\n  }\n  return current;\n};\n\nexport const deleteNode = (node: BinaryNode | null, value: number): BinaryNode | null => {\n  if (!node) return null;\n\n  if (value < node.value) {\n    return {\n      ...node,\n      left: deleteNode(node.left, value),\n    };\n  }\n\n  if (value > node.value) {\n    return {\n      ...node,\n      right: deleteNode(node.right, value),\n    };\n  }\n\n  // Nodo encontrado\n  if (!node.left) return node.right;\n  if (!node.right) return node.left;\n\n  const minRight = findMinNode(node.right);\n  return {\n    ...node,\n    value: minRight.value,\n    right: deleteNode(node.right, minRight.value),\n  };\n};\n"})})}),(0,s.jsx)(i.A,{value:"test",label:"Test Unitario",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'import { describe, it, expect, beforeEach } from "vitest";\nimport {\n  BinaryNode,\n  insertNode,\n  searchNode,\n  deleteNode,\n  inOrder,\n  createNode,\n} from "./binary-tree";\n\ndescribe("Binary Tree - Functional", () => {\n  let tree: BinaryNode | null = null;\n\n  beforeEach(() => {\n    const values = [10, 5, 15, 3, 7, 13, 17];\n    tree = values.reduce(insertNode, null);\n  });\n\n  it("should find existing values", () => {\n    expect(searchNode(tree, 5)).toBe(true);\n    expect(searchNode(tree, 13)).toBe(true);\n    expect(searchNode(tree, 17)).toBe(true);\n  });\n\n  it("should not find non-existing values", () => {\n    expect(searchNode(tree, 99)).toBe(false);\n    expect(searchNode(tree, -1)).toBe(false);\n  });\n\n  it("should delete a leaf node", () => {\n    const updated = deleteNode(tree, 3);\n    expect(searchNode(updated, 3)).toBe(false);\n  });\n\n  it("should delete a node with one child", () => {\n    const updated = deleteNode(tree, 5);\n    expect(searchNode(updated, 5)).toBe(false);\n    expect(searchNode(updated, 7)).toBe(true);\n  });\n\n  it("should delete a node with two children", () => {\n    const updated = deleteNode(tree, 15);\n    expect(searchNode(updated, 15)).toBe(false);\n    expect(searchNode(updated, 13)).toBe(true);\n    expect(searchNode(updated, 17)).toBe(true);\n  });\n\n  it("should perform in-order traversal correctly", () => {\n    const visited: number[] = [];\n    inOrder(tree, (v) => visited.push(v));\n    expect(visited).toEqual([3, 5, 7, 10, 13, 15, 17]);\n  });\n});\n'})})})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"aplicaciones-pr\xe1cticas-de-los-bst",children:"Aplicaciones pr\xe1cticas de los BST"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Sistemas de b\xfasqueda r\xe1pida (e.g., \xe1rboles de \xedndices en bases de datos)."}),"\n",(0,s.jsx)(n.li,{children:"Compiladores (s\xedmbolos ordenados)."}),"\n",(0,s.jsx)(n.li,{children:"Manejo de directorios o \xe1rboles de archivos."}),"\n",(0,s.jsx)(n.li,{children:"Autocompletado (cuando se combinan con trie o AVL)."}),"\n",(0,s.jsx)(n.li,{children:"Algoritmos como Huffman Tree usan variantes de BST."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Cormen, T. H., Leiserson, C. E., Rivest, R. L., & Stein, C. (2009). ",(0,s.jsx)(n.a,{href:"https://mitpress.mit.edu/9780262033848/introduction-to-algorithms/",children:"Introduction to Algorithms (3rd ed.). MIT Press."})]}),"\n",(0,s.jsxs)(n.li,{children:["Goodrich, M. T., Tamassia, R., & Goldwasser, M. H. (2014). ",(0,s.jsx)(n.a,{href:"https://www.wiley.com/en-us/Data+Structures+and+Algorithms+in+Java%2C+6th+Edition-p-9781118771334",children:"Data Structures and Algorithms in Java (6th ed.). Wiley."})]}),"\n",(0,s.jsxs)(n.li,{children:["GeeksforGeeks. (2024). ",(0,s.jsx)(n.a,{href:"https://www.geeksforgeeks.org/binary-search-tree-data-structure/",children:"Binary Search Tree (BST)."})]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>i});var a=r(6540);const s={},t=a.createContext(s);function l(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(t.Provider,{value:n},e.children)}},9365:(e,n,r)=>{r.d(n,{A:()=>l});r(6540);var a=r(4164);const s={tabItem:"tabItem_Ymn6"};var t=r(4848);function l({children:e,hidden:n,className:r}){return(0,t.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,r),hidden:n,children:e})}}}]);