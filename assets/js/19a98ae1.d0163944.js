"use strict";(globalThis.webpackChunkdata_structures=globalThis.webpackChunkdata_structures||[]).push([[9736],{1470:(e,n,r)=>{r.d(n,{A:()=>y});var a=r(6540),s=r(4164),t=r(3104),u=r(6347),i=r(205),l=r(7485),o=r(1682),d=r(679);function c(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:n,children:r}=e;return(0,a.useMemo)(()=>{const e=n??function(e){return c(e).map(({props:{value:e,label:n,attributes:r,default:a}})=>({value:e,label:n,attributes:r,default:a}))}(r);return function(e){const n=(0,o.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,r])}function h({value:e,tabValues:n}){return n.some(n=>n.value===e)}function m({queryString:e=!1,groupId:n}){const r=(0,u.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(s),(0,a.useCallback)(e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})},[s,r])]}function f(e){const{defaultValue:n,queryString:r=!1,groupId:s}=e,t=p(e),[u,l]=(0,a.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find(e=>e.default)??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:t})),[o,c]=m({queryString:r,groupId:s}),[f,x]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,s]=(0,d.Dv)(n);return[r,(0,a.useCallback)(e=>{n&&s.set(e)},[n,s])]}({groupId:s}),j=(()=>{const e=o??f;return h({value:e,tabValues:t})?e:null})();(0,i.A)(()=>{j&&l(j)},[j]);return{selectedValue:u,selectValue:(0,a.useCallback)(e=>{if(!h({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),x(e)},[c,x,t]),tabValues:t}}var x=r(2303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var q=r(4848);function v({className:e,block:n,selectedValue:r,selectValue:a,tabValues:u}){const i=[],{blockElementScrollPositionUntilNextRender:l}=(0,t.a_)(),o=e=>{const n=e.currentTarget,s=i.indexOf(n),t=u[s].value;t!==r&&(l(n),a(t))},d=e=>{let n=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const r=i.indexOf(e.currentTarget)+1;n=i[r]??i[0];break}case"ArrowLeft":{const r=i.indexOf(e.currentTarget)-1;n=i[r]??i[i.length-1];break}}n?.focus()};return(0,q.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:u.map(({value:e,label:n,attributes:a})=>(0,q.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{i.push(e)},onKeyDown:d,onClick:o,...a,className:(0,s.A)("tabs__item",j.tabItem,a?.className,{"tabs__item--active":r===e}),children:n??e},e))})}function b({lazy:e,children:n,selectedValue:r}){const t=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=t.find(e=>e.props.value===r);return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,q.jsx)("div",{className:"margin-top--md",children:t.map((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r}))})}function g(e){const n=f(e);return(0,q.jsxs)("div",{className:(0,s.A)("tabs-container",j.tabList),children:[(0,q.jsx)(v,{...n,...e}),(0,q.jsx)(b,{...n,...e})]})}function y(e){const n=(0,x.A)();return(0,q.jsx)(g,{...e,children:c(e.children)},String(n))}},4984:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"linear_structures_and_use_of_nodes/queue","title":"Queue (Colas): FIFO, variantes (colas dobles, de prioridad)","description":"Una cola (Queue) es una estructura de datos lineal que sigue el principio FIFO (First In, First Out), es decir, el primer elemento en entrar es el primero en salir.","source":"@site/docs/04_linear_structures_and_use_of_nodes/07_queue.md","sourceDirName":"04_linear_structures_and_use_of_nodes","slug":"/linear_structures_and_use_of_nodes/queue","permalink":"/Data_Structures/docs/linear_structures_and_use_of_nodes/queue","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/04_linear_structures_and_use_of_nodes/07_queue.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar-position":7},"sidebar":"tutorialSidebar","previous":{"title":"Stack (Pilas): LIFO, implementaci\xf3n con arrays y listas enlazadas","permalink":"/Data_Structures/docs/linear_structures_and_use_of_nodes/stack"},"next":{"title":"Ejercicios propuestos por tema","permalink":"/Data_Structures/docs/linear_structures_and_use_of_nodes/exercises"}}');var s=r(4848),t=r(8453),u=r(1470),i=r(9365);const l={"sidebar-position":7},o="Queue (Colas): FIFO, variantes (colas dobles, de prioridad)",d={},c=[{value:"Caracter\xedsticas",id:"caracter\xedsticas",level:2},{value:"Ejemplo de FIFO",id:"ejemplo-de-fifo",level:2},{value:"Variantes de Colas",id:"variantes-de-colas",level:2},{value:"Cola FIFO",id:"cola-fifo",level:2},{value:"Ejemplo T\xe9cnico",id:"ejemplo-t\xe9cnico",level:2},{value:"Diagrama de Secuencia",id:"diagrama-de-secuencia",level:2},{value:"Aplicaciones Pr\xe1cticas",id:"aplicaciones-pr\xe1cticas",level:2},{value:"Buenas Pr\xe1cticas",id:"buenas-pr\xe1cticas",level:2},{value:"Referencias",id:"referencias",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"queue-colas-fifo-variantes-colas-dobles-de-prioridad",children:"Queue (Colas): FIFO, variantes (colas dobles, de prioridad)"})}),"\n",(0,s.jsxs)(n.p,{children:["Una ",(0,s.jsx)(n.strong,{children:"cola (Queue)"})," es una estructura de datos lineal que sigue el principio ",(0,s.jsx)(n.strong,{children:"FIFO"})," (First In, First Out), es decir, el primer elemento en entrar es el primero en salir."]}),"\n",(0,s.jsx)(n.h2,{id:"caracter\xedsticas",children:"Caracter\xedsticas"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Tiene dos extremos:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Front (frente):"})," por donde se eliminan los elementos."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rear (final):"})," por donde se insertan los elementos."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Operaciones fundamentales:","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"enqueue"}),": Inserta un elemento en el final de la cola."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"dequeue"}),": Elimina el elemento al frente de la cola."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"peek"}),"/",(0,s.jsx)(n.code,{children:"front"}),": Devuelve el elemento al frente sin eliminarlo."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"isEmpty"}),": Verifica si la cola est\xe1 vac\xeda."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"ejemplo-de-fifo",children:"Ejemplo de FIFO"}),"\n",(0,s.jsx)(n.p,{children:"Una fila en el banco: el primero que llega es el primero en ser atendido."}),"\n",(0,s.jsx)(n.h2,{id:"variantes-de-colas",children:"Variantes de Colas"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Colas dobles (Deque - Double-Ended Queue):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Permiten inserciones y eliminaciones por ambos extremos."}),"\n",(0,s.jsxs)(n.li,{children:["M\xe9todos adicionales:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"enqueueFront"}),": insertar al frente."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"dequeueRear"}),": eliminar del final."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Colas de prioridad (Priority Queue):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cada elemento tiene una prioridad asociada."}),"\n",(0,s.jsxs)(n.li,{children:["Al hacer ",(0,s.jsx)(n.code,{children:"dequeue"}),", se elimina el elemento con mayor prioridad (no necesariamente el m\xe1s antiguo)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"cola-fifo",children:"Cola FIFO"}),"\n",(0,s.jsx)(n.mermaid,{value:"graph LR\n    A[Rear] --\x3e B[Elemento 1]\n    B --\x3e C[Elemento 2]\n    C --\x3e D[Elemento 3]\n    D --\x3e E[Front]"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"enqueue"}),": Se inserta en el extremo ",(0,s.jsx)(n.code,{children:"Rear"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"dequeue"}),": Se elimina en el extremo ",(0,s.jsx)(n.code,{children:"Front"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"ejemplo-t\xe9cnico",children:"Ejemplo T\xe9cnico"}),"\n","\n",(0,s.jsxs)(u.A,{children:[(0,s.jsx)(i.A,{value:"java",label:"Paradigma: Orientado a Objetos",children:(0,s.jsxs)(u.A,{children:[(0,s.jsxs)(i.A,{value:"code",label:"C\xf3digo Java Ejemplo",children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Implementaci\xf3n con arrays:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="QueueArray.java" showLineNumbers',children:'public class QueueArray<T> {\n    private Object[] elements;\n    private int front, rear, size, capacity;\n\n    public QueueArray(int capacity) {\n        this.capacity = capacity;\n        elements = new Object[capacity];\n        front = size = 0;\n        rear = -1;\n    }\n\n    public void enqueue(T data) {\n        if (size == capacity) throw new RuntimeException("Queue overflow");\n        rear = (rear + 1) % capacity;\n        elements[rear] = data;\n        size++;\n    }\n\n    public T dequeue() {\n        if (isEmpty()) throw new RuntimeException("Queue underflow");\n        T data = (T) elements[front];\n        front = (front + 1) % capacity;\n        size--;\n        return data;\n    }\n\n    public T peek() {\n        if (isEmpty()) throw new RuntimeException("Queue is empty");\n        return (T) elements[front];\n    }\n\n    public boolean isEmpty() {\n        return size == 0;\n    }\n}\n'})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Implementaci\xf3n con listas enlazadas:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="QueueLinkedList.java" showLineNumbers',children:'class Node<T> {\n    T data;\n    Node<T> next;\n    Node(T data) { this.data = data; }\n}\n\npublic class QueueLinkedList<T> {\n    private Node<T> front, rear;\n\n    public void enqueue(T data) {\n        Node<T> newNode = new Node<>(data);\n        if (rear == null) {\n            front = rear = newNode;\n            return;\n        }\n        rear.next = newNode;\n        rear = newNode;\n    }\n\n    public T dequeue() {\n        if (isEmpty()) throw new RuntimeException("Queue underflow");\n        T data = front.data;\n        front = front.next;\n        if (front == null) rear = null;\n        return data;\n    }\n\n    public T peek() {\n        if (isEmpty()) throw new RuntimeException("Queue is empty");\n        return front.data;\n    }\n\n    public boolean isEmpty() {\n        return front == null;\n    }\n}\n'})})]}),(0,s.jsx)(i.A,{value:"test",label:"Test Unitario",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:"showLineNumbers",children:"import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class QueueTest {\n\n    @Test\n    void testQueueArray() {\n        QueueArray<Integer> queue = new QueueArray<>(3);\n\n        assertTrue(queue.isEmpty());\n        queue.enqueue(10);\n        queue.enqueue(20);\n\n        assertEquals(10, queue.peek());\n        assertEquals(10, queue.dequeue());\n        assertEquals(20, queue.peek());\n\n        queue.enqueue(30);\n        queue.enqueue(40); // Llenar la cola\n        assertThrows(RuntimeException.class, () -> queue.enqueue(50)); // Overflow\n\n        assertEquals(20, queue.dequeue());\n        assertEquals(30, queue.dequeue());\n        assertEquals(40, queue.dequeue());\n\n        assertTrue(queue.isEmpty());\n        assertThrows(RuntimeException.class, queue::dequeue); // Underflow\n    }\n\n    @Test\n    void testQueueLinkedList() {\n        QueueLinkedList<Integer> queue = new QueueLinkedList<>();\n\n        assertTrue(queue.isEmpty());\n        queue.enqueue(5);\n        queue.enqueue(15);\n        queue.enqueue(25);\n\n        assertEquals(5, queue.peek());\n        assertEquals(5, queue.dequeue());\n        assertEquals(15, queue.peek());\n\n        queue.dequeue();\n        queue.dequeue();\n        assertTrue(queue.isEmpty());\n        assertThrows(RuntimeException.class, queue::dequeue); // Underflow\n    }\n}\n"})})})]})}),(0,s.jsx)(i.A,{value:"python",label:"Paradigma: Procedural",children:(0,s.jsxs)(u.A,{children:[(0,s.jsxs)(i.A,{value:"code",label:"C\xf3digo Python Ejemplo",children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Implementaci\xf3n con listas:"})," (arrays din\xe1micos en Python)"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'def create_queue():\n    return []\n\ndef enqueue(queue, data):\n    queue.append(data)\n\ndef dequeue(queue):\n    if is_empty(queue):\n        raise IndexError("Queue underflow")\n    return queue.pop(0)\n\ndef peek(queue):\n    if is_empty(queue):\n        raise IndexError("Queue is empty")\n    return queue[0]\n\ndef is_empty(queue):\n    return len(queue) == 0\n'})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Implementaci\xf3n con listas enlazadas:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef enqueue_linked(front, rear, data):\n    new_node = Node(data)\n    if rear is None:\n        return new_node, new_node\n    rear.next = new_node\n    return front, new_node\n\ndef dequeue_linked(front, rear):\n    if front is None:\n        raise IndexError("Queue underflow")\n    return front.next, rear, front.data\n\ndef peek_linked(front):\n    if front is None:\n        raise IndexError("Queue is empty")\n    return front.data\n'})})]}),(0,s.jsx)(i.A,{value:"test",label:"Test Unitario",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:"import pytest\nfrom queue_example import create_queue, enqueue, dequeue, peek, is_empty\nfrom queue_example import enqueue_linked, dequeue_linked, peek_linked, Node\n\ndef test_queue_array():\n    q = create_queue()\n    assert is_empty(q)\n\n    enqueue(q, 1)\n    enqueue(q, 2)\n    enqueue(q, 3)\n\n    assert peek(q) == 1\n    assert dequeue(q) == 1\n    assert peek(q) == 2\n\n    dequeue(q)\n    dequeue(q)\n    assert is_empty(q)\n\n    with pytest.raises(IndexError):\n        dequeue(q)  # Underflow\n\ndef test_queue_linked():\n    front, rear = None, None\n    front, rear = enqueue_linked(front, rear, 10)\n    front, rear = enqueue_linked(front, rear, 20)\n\n    assert peek_linked(front) == 10\n\n    front, rear, data = dequeue_linked(front, rear)\n    assert data == 10\n    assert peek_linked(front) == 20\n\n    front, rear, data = dequeue_linked(front, rear)\n    assert data == 20\n    assert front is None and rear is None\n\n    with pytest.raises(IndexError):\n        dequeue_linked(front, rear)\n"})})})]})}),(0,s.jsx)(i.A,{value:"ts",label:"Paradigma: Funcional",children:(0,s.jsxs)(u.A,{children:[(0,s.jsxs)(i.A,{value:"code",label:"C\xf3digo TS Ejemplo",children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Implementaci\xf3n con arrays:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'export const createQueue = <T>(): T[] => [];\n\nexport const enqueue = <T>(queue: T[], data: T): void => {\n  queue.push(data);\n};\n\nexport const dequeue = <T>(queue: T[]): T => {\n  if (isEmpty(queue)) throw new Error("Queue underflow");\n  return queue.shift()!;\n};\n\nexport const peek = <T>(queue: T[]): T => {\n  if (isEmpty(queue)) throw new Error("Queue is empty");\n  return queue[0];\n};\n\nexport const isEmpty = <T>(queue: T[]): boolean => queue.length === 0;\n'})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Implementaci\xf3n con listas enlazadas:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'export type Node<T> = {\n  data: T;\n  next: Node<T> | null;\n};\n\nexport const enqueueLinked = <T>(\n  front: Node<T> | null,\n  rear: Node<T> | null,\n  data: T\n): { front: Node<T>; rear: Node<T> } => {\n  const newNode: Node<T> = { data, next: null };\n  if (!rear) return { front: newNode, rear: newNode };\n  rear.next = newNode;\n  return { front: front!, rear: newNode };\n};\n\nexport const dequeueLinked = <T>(\n  front: Node<T> | null,\n  rear: Node<T> | null\n): { front: Node<T> | null; rear: Node<T> | null; data: T } => {\n  if (!front) throw new Error("Queue underflow");\n  const data = front.data;\n  front = front.next;\n  if (!front) rear = null;\n  return { front, rear, data };\n};\n'})})]}),(0,s.jsx)(i.A,{value:"test",label:"Test Unitario",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'import {\n  createQueue,\n  enqueue,\n  dequeue,\n  peek,\n  isEmpty\n} from "./queueArray";\n\nimport {\n  Node,\n  enqueueLinked,\n  dequeueLinked\n} from "./queueLinked";\n\ntest("queue array FIFO behavior", () => {\n  const queue = createQueue<number>();\n  expect(isEmpty(queue)).toBe(true);\n\n  enqueue(queue, 1);\n  enqueue(queue, 2);\n  enqueue(queue, 3);\n\n  expect(peek(queue)).toBe(1);\n  expect(dequeue(queue)).toBe(1);\n  expect(peek(queue)).toBe(2);\n\n  dequeue(queue);\n  dequeue(queue);\n  expect(isEmpty(queue)).toBe(true);\n\n  expect(() => dequeue(queue)).toThrowError("Queue underflow");\n});\n\ntest("queue linked list FIFO behavior", () => {\n  let front: Node<number> | null = null;\n  let rear: Node<number> | null = null;\n\n  ({ front, rear } = enqueueLinked(front, rear, 10));\n  ({ front, rear } = enqueueLinked(front, rear, 20));\n\n  expect(front!.data).toBe(10);\n\n  let result = dequeueLinked(front, rear);\n  front = result.front;\n  rear = result.rear;\n  expect(result.data).toBe(10);\n\n  result = dequeueLinked(front, rear);\n  front = result.front;\n  rear = result.rear;\n  expect(result.data).toBe(20);\n\n  expect(() => dequeueLinked(front, rear)).toThrowError("Queue underflow");\n});\n'})})})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"diagrama-de-secuencia",children:"Diagrama de Secuencia"}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\n    autonumber\n    participant User\n    participant Queue\n    participant Node\n\n    User->>Queue: enqueue(10)\n    activate Queue\n    Queue->>Node: Crear nuevo nodo con valor 10\n    Node--\x3e>Queue: Nodo creado\n    Queue->>Queue: \xbfCola vac\xeda?\n    alt S\xed\n        Queue->>Queue: front = rear = nuevo nodo\n    else No\n        Queue->>Queue: rear.next = nuevo nodo\n        Queue->>Queue: rear = nuevo nodo\n    end\n    deactivate Queue\n\n    User->>Queue: enqueue(20)\n    activate Queue\n    Queue->>Node: Crear nuevo nodo con valor 20\n    Node--\x3e>Queue: Nodo creado\n    Queue->>Queue: rear.next = nuevo nodo\n    Queue->>Queue: rear = nuevo nodo\n    deactivate Queue\n\n    User->>Queue: dequeue()\n    activate Queue\n    Queue->>Queue: \xbfCola vac\xeda?\n    alt S\xed\n        Queue--\x3e>User: Error: underflow\n    else No\n        Queue->>Queue: Guardar front.data\n        Queue->>Queue: front = front.next\n        alt front == null\n            Queue->>Queue: rear = null\n        end\n        Queue--\x3e>User: Devuelve elemento eliminado\n    end\n    deactivate Queue"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"El usuario solicita agregar un elemento a la cola (enqueue) con el valor 10."}),"\n",(0,s.jsx)(n.li,{children:"La cola crea una instancia de nodo con el valor 10."}),"\n",(0,s.jsx)(n.li,{children:"El nodo creado se almacena en la cola."}),"\n",(0,s.jsx)(n.li,{children:"Se valida si la cola est\xe1 vac\xeda."}),"\n",(0,s.jsx)(n.li,{children:"En caso de estar vac\xeda, se establece el frente y el final de la cola en el nuevo nodo."}),"\n",(0,s.jsx)(n.li,{children:"Si no est\xe1 vac\xeda, se establece el siguiente nodo del final en el nuevo nodo."}),"\n",(0,s.jsx)(n.li,{children:"Luego, se actualiza el final."}),"\n",(0,s.jsx)(n.li,{children:"El usuario solicita agregar otro elemento a la cola (enqueue) con el valor 20."}),"\n",(0,s.jsx)(n.li,{children:"La cola crea una instancia de nodo con el valor 20."}),"\n",(0,s.jsx)(n.li,{children:"El nodo creado se almacena en la cola."}),"\n",(0,s.jsx)(n.li,{children:"Se establece que el siguiente nodo del final es el nuevo nodo."}),"\n",(0,s.jsx)(n.li,{children:"Se actualiza el final."}),"\n",(0,s.jsx)(n.li,{children:"El usuario solicita eliminar un elemento de la cola (dequeue)."}),"\n",(0,s.jsx)(n.li,{children:"Se valida si la cola est\xe1 vac\xeda."}),"\n",(0,s.jsx)(n.li,{children:"En caso de estar vac\xeda, se retorna un mensaje de desbordamiento."}),"\n",(0,s.jsx)(n.li,{children:"Si la cola no est\xe1 vac\xeda, se almacena el valor del frente en una variable temporal."}),"\n",(0,s.jsx)(n.li,{children:"El frente actualiza su valor con la referencia al nodo siguiente."}),"\n",(0,s.jsx)(n.li,{children:"Si el frente est\xe1 vac\xedo, entonces el final tambi\xe9n se vac\xeda."}),"\n",(0,s.jsx)(n.li,{children:"Se devuelve el elemento eliminado."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"aplicaciones-pr\xe1cticas",children:"Aplicaciones Pr\xe1cticas"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sistemas operativos:"})," planificaci\xf3n de procesos."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Colas de impresi\xf3n:"})," los documentos se imprimen en orden de llegada."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Redes:"})," paquetes de datos procesados en orden de llegada."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sistemas de atenci\xf3n al cliente:"})," turnos FIFO."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Deque:"})," usado en algoritmos de ventanas deslizantes (sliding window)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Priority Queue:"})," usado en algoritmos como Dijkstra para encontrar caminos m\xe1s cortos."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"buenas-pr\xe1cticas",children:"Buenas Pr\xe1cticas"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SRP:"})," La cola debe encargarse solo de la gesti\xf3n de elementos FIFO."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Abstracci\xf3n:"})," Variantes (Deque, Priority Queue) deben implementarse como extensiones sin modificar la base."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pruebas unitarias:"})," Validar desbordamiento, subdesbordamiento y prioridades."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Interfaces claras:"})," M\xe9todos como enqueue, dequeue, peek y isEmpty facilitan el uso."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cormen, T. H., Leiserson, C. E., Rivest, R. L., & Stein, C. (2022). Introduction to Algorithms (4th ed.). MIT Press."}),"\n",(0,s.jsx)(n.li,{children:"Weiss, M. A. (2020). Data Structures and Algorithm Analysis in Java (4th ed.). Pearson."}),"\n",(0,s.jsx)(n.li,{children:"McDowell, G. (2016). Cracking the Coding Interview. CareerCup."}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.python.org/3/tutorial",children:"Python 3"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://jestjs.io/docs/getting-started",children:"Jest"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>u,x:()=>i});var a=r(6540);const s={},t=a.createContext(s);function u(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:u(e.components),a.createElement(t.Provider,{value:n},e.children)}},9365:(e,n,r)=>{r.d(n,{A:()=>u});r(6540);var a=r(4164);const s={tabItem:"tabItem_Ymn6"};var t=r(4848);function u({children:e,hidden:n,className:r}){return(0,t.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,r),hidden:n,children:e})}}}]);