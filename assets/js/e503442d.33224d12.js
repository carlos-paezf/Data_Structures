"use strict";(globalThis.webpackChunkdata_structures=globalThis.webpackChunkdata_structures||[]).push([[2764],{1470:(e,n,r)=>{r.d(n,{A:()=>N});var a=r(6540),s=r(4164),t=r(3104),l=r(6347),i=r(205),o=r(7485),c=r(1682),d=r(679);function m(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:r}=e;return(0,a.useMemo)(()=>{const e=n??function(e){return m(e).map(({props:{value:e,label:n,attributes:r,default:a}})=>({value:e,label:n,attributes:r,default:a}))}(r);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,r])}function u({value:e,tabValues:n}){return n.some(n=>n.value===e)}function g({queryString:e=!1,groupId:n}){const r=(0,l.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,o.aZ)(s),(0,a.useCallback)(e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})},[s,r])]}function x(e){const{defaultValue:n,queryString:r=!1,groupId:s}=e,t=h(e),[l,o]=(0,a.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find(e=>e.default)??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:t})),[c,m]=g({queryString:r,groupId:s}),[x,p]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,s]=(0,d.Dv)(n);return[r,(0,a.useCallback)(e=>{n&&s.set(e)},[n,s])]}({groupId:s}),j=(()=>{const e=c??x;return u({value:e,tabValues:t})?e:null})();(0,i.A)(()=>{j&&o(j)},[j]);return{selectedValue:l,selectValue:(0,a.useCallback)(e=>{if(!u({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);o(e),m(e),p(e)},[m,p,t]),tabValues:t}}var p=r(2303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=r(4848);function b({className:e,block:n,selectedValue:r,selectValue:a,tabValues:l}){const i=[],{blockElementScrollPositionUntilNextRender:o}=(0,t.a_)(),c=e=>{const n=e.currentTarget,s=i.indexOf(n),t=l[s].value;t!==r&&(o(n),a(t))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=i.indexOf(e.currentTarget)+1;n=i[r]??i[0];break}case"ArrowLeft":{const r=i.indexOf(e.currentTarget)-1;n=i[r]??i[i.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:l.map(({value:e,label:n,attributes:a})=>(0,f.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{i.push(e)},onKeyDown:d,onClick:c,...a,className:(0,s.A)("tabs__item",j.tabItem,a?.className,{"tabs__item--active":r===e}),children:n??e},e))})}function v({lazy:e,children:n,selectedValue:r}){const t=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=t.find(e=>e.props.value===r);return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:t.map((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r}))})}function y(e){const n=x(e);return(0,f.jsxs)("div",{className:(0,s.A)("tabs-container",j.tabList),children:[(0,f.jsx)(b,{...n,...e}),(0,f.jsx)(v,{...n,...e})]})}function N(e){const n=(0,p.A)();return(0,f.jsx)(y,{...e,children:m(e.children)},String(n))}},4874:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"sorting_algorithms/merge_sort","title":"Merge Sort","description":"Merge Sort es un algoritmo de ordenamiento eficiente basado en el paradigma Divide y Vencer\xe1s (Divide and Conquer). Se divide recursivamente la lista en mitades hasta obtener sublistas de un solo elemento, y luego se fusionan en orden ascendente.","source":"@site/docs/05_sorting_algorithms/05_merge_sort.md","sourceDirName":"05_sorting_algorithms","slug":"/sorting_algorithms/merge_sort","permalink":"/Data_Structures/docs/sorting_algorithms/merge_sort","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/05_sorting_algorithms/05_merge_sort.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar-position":5},"sidebar":"tutorialSidebar","previous":{"title":"Insertion Sort","permalink":"/Data_Structures/docs/sorting_algorithms/insertion_sort"},"next":{"title":"Quick Sort","permalink":"/Data_Structures/docs/sorting_algorithms/quick_sort"}}');var s=r(4848),t=r(8453),l=r(1470),i=r(9365);const o={"sidebar-position":5},c="Merge Sort",d={},m=[{value:"Complejidades",id:"complejidades",level:2},{value:"Propiedades",id:"propiedades",level:2},{value:"Diagrama de flujo",id:"diagrama-de-flujo",level:2},{value:"Diagrama de secuencia",id:"diagrama-de-secuencia",level:2},{value:"Ejemplo t\xe9cnico",id:"ejemplo-t\xe9cnico",level:2},{value:"Aplicaciones pr\xe1cticas",id:"aplicaciones-pr\xe1cticas",level:2},{value:"Referencias",id:"referencias",level:2}];function h(e){const n={annotation:"annotation",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",math:"math",mermaid:"mermaid",mi:"mi",mo:"mo",mrow:"mrow",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"merge-sort",children:"Merge Sort"})}),"\n",(0,s.jsxs)(n.p,{children:["Merge Sort es un algoritmo de ordenamiento eficiente basado en el paradigma ",(0,s.jsx)(n.strong,{children:"Divide y Vencer\xe1s (Divide and Conquer)"}),". Se divide recursivamente la lista en mitades hasta obtener sublistas de un solo elemento, y luego se ",(0,s.jsx)(n.strong,{children:"fusionan"})," en orden ascendente."]}),"\n",(0,s.jsx)(n.p,{children:"Su funcionamiento general es el siguiente:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dividir:"})," Si la lista tiene m\xe1s de un elemento, se divide en dos mitades."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Conquistar:"})," Ordenar recursivamente ambas mitades."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Combinar:"})," Fusionar las dos listas ordenadas en una sola lista ordenada."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"complejidades",children:"Complejidades"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["En el mejor caso, la complejidad temporal es de ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"O"}),(0,s.jsx)(n.mo,{stretchy:"false",children:"("}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mi,{children:"l"}),(0,s.jsx)(n.mi,{children:"o"}),(0,s.jsx)(n.mi,{children:"g"}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n log n)"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(n.span,{className:"mopen",children:"("}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mclose",children:")"})]})})]})," y la complejidad espacial es de ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"O"}),(0,s.jsx)(n.mo,{stretchy:"false",children:"("}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(n.span,{className:"mopen",children:"("}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mclose",children:")"})]})})]})]}),"\n",(0,s.jsxs)(n.li,{children:["En el caso promedio, la complejidad temporal es de ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"O"}),(0,s.jsx)(n.mo,{stretchy:"false",children:"("}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mi,{children:"l"}),(0,s.jsx)(n.mi,{children:"o"}),(0,s.jsx)(n.mi,{children:"g"}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n log n)"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(n.span,{className:"mopen",children:"("}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mclose",children:")"})]})})]})," y la complejidad espacial es de ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"O"}),(0,s.jsx)(n.mo,{stretchy:"false",children:"("}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(n.span,{className:"mopen",children:"("}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mclose",children:")"})]})})]})]}),"\n",(0,s.jsxs)(n.li,{children:["En el peor caso, la complejidad temporal es de ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"O"}),(0,s.jsx)(n.mo,{stretchy:"false",children:"("}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mi,{children:"l"}),(0,s.jsx)(n.mi,{children:"o"}),(0,s.jsx)(n.mi,{children:"g"}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n log n)"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(n.span,{className:"mopen",children:"("}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mclose",children:")"})]})})]})," y la complejidad espacial es de ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"O"}),(0,s.jsx)(n.mo,{stretchy:"false",children:"("}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(n.span,{className:"mopen",children:"("}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mclose",children:")"})]})})]})]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Merge sort no es ",(0,s.jsx)(n.strong,{children:"in-place"})," y requiere memoria adicional proporcional al tama\xf1o de la lista."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"propiedades",children:"Propiedades"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Si es estable"}),"\n",(0,s.jsx)(n.li,{children:"No es adaptativo"}),"\n",(0,s.jsx)(n.li,{children:"Su eficiencia es ideal para listas grandes"}),"\n",(0,s.jsxs)(n.li,{children:["Se suele usar en bibliotecas est\xe1ndar, por ejemplo: ",(0,s.jsx)(n.code,{children:"Array.sort()"})," en Java para objetos."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"diagrama-de-flujo",children:"Diagrama de flujo"}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    A["Inicio: mergeSort(arr)"] --\x3e B{Tama\xf1o de arr > 1?}\n    B -- No --\x3e Z["Retornar arr"]\n    B -- S\xed --\x3e C["Dividir arr en dos mitades: left y right"]\n    C --\x3e D["Ordenar izquierda: mergeSort(left)"]\n    D --\x3e E["Ordenar derecha: mergeSort(right)"]\n    E --\x3e F["Fusionar left y right ordenadamente"]\n    F --\x3e Z["Retornar lista fusionada"]'}),"\n",(0,s.jsx)(n.h2,{id:"diagrama-de-secuencia",children:"Diagrama de secuencia"}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\n    autonumber\n    participant User\n    participant MergeSort\n    participant Merge\n    participant Array\n\n    User->>MergeSort: mergeSort(arr)\n    activate MergeSort\n\n    alt arr.length <= 1\n        MergeSort--\x3e>User: Retornar arr\n    else\n        MergeSort->>Array: Dividir arr en left y right\n        MergeSort->>MergeSort: mergeSort(left)\n        MergeSort->>MergeSort: mergeSort(right)\n\n        MergeSort->>Merge: merge(leftSorted, rightSorted)\n        Merge->>Array: Fusionar en orden ascendente\n        Merge--\x3e>MergeSort: Retornar arreglo fusionado\n\n        MergeSort--\x3e>User: Retornar arreglo ordenado\n\n    deactivate MergeSort\n    end"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Un usuario solicita ordenar un arreglo usando el algoritmo Merge Sort"}),"\n",(0,s.jsx)(n.li,{children:"Si el arreglo solo contiene 1 o 0 elementos, se retorna el arreglo en su estado actual."}),"\n",(0,s.jsx)(n.li,{children:"Se divide el arreglo en 2, la primera mitad corresponde al arreglo izquierdo, y la segundo en el arreglo derecho."}),"\n",(0,s.jsx)(n.li,{children:"De manera recursiva se aplica el paso 3 y siguientes para el arreglo del lado izquierdo."}),"\n",(0,s.jsx)(n.li,{children:"De manera recursiva se aplica el paso 3 y siguientes para el arreglo del lado derecho."}),"\n",(0,s.jsx)(n.li,{children:"Se migran o juntan los resultados del lado izquierdo con los del lado derecho."}),"\n",(0,s.jsx)(n.li,{children:"Usando el m\xe9todo merge, se fusionan en orden ascendente."}),"\n",(0,s.jsx)(n.li,{children:"Se retorna el arreglo fusionado"}),"\n",(0,s.jsx)(n.li,{children:"Se retorna el arreglo ordenado"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"ejemplo-t\xe9cnico",children:"Ejemplo t\xe9cnico"}),"\n","\n",(0,s.jsxs)(l.A,{children:[(0,s.jsx)(i.A,{value:"java",label:"Paradigma: Orientado a Objetos",children:(0,s.jsxs)(l.A,{children:[(0,s.jsx)(i.A,{value:"code",label:"C\xf3digo Java Ejemplo",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:"showLineNumbers",children:"public class MergeSort {\n    public static int[] sort(int[] array) {\n        if (array.length <= 1) return array;\n\n        int mid = array.length / 2;\n        int[] left = sort(Arrays.copyOfRange(array, 0, mid));\n        int[] right = sort(Arrays.copyOfRange(array, mid, array.length));\n\n        return merge(left, right);\n    }\n\n    private static int[] merge(int[] left, int[] right) {\n        int[] result = new int[left.length + right.length];\n        int i = 0, j = 0, k = 0;\n\n        while (i < left.length && j < right.length)\n            result[k++] = (left[i] <= right[j]) ? left[i++] : right[j++];\n\n        while (i < left.length) result[k++] = left[i++];\n        while (j < right.length) result[k++] = right[j++];\n\n        return result;\n    }\n}\n"})})}),(0,s.jsx)(i.A,{value:"test",label:"Test Unitario",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:"showLineNumbers",children:"import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class MergeSortTest {\n    @Test\n    void testSort() {\n        int[] data = {5, 2, 9, 1, 3};\n        int[] expected = {1, 2, 3, 5, 9};\n        assertArrayEquals(expected, MergeSort.sort(data));\n    }\n}\n"})})})]})}),(0,s.jsx)(i.A,{value:"python",label:"Paradigma: Procedural",children:(0,s.jsxs)(l.A,{children:[(0,s.jsx)(i.A,{value:"code",label:"C\xf3digo Python Ejemplo",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:"def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n"})})}),(0,s.jsx)(i.A,{value:"test",label:"Test Unitario",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:"from merge_sort import merge_sort\n\ndef test_merge_sort():\n    assert merge_sort([3,1,4,1,5]) == [1,1,3,4,5]\n    assert merge_sort([]) == []\n    assert merge_sort([42]) == [42]\n"})})})]})}),(0,s.jsx)(i.A,{value:"functional",label:"Paradigma: Funcional",children:(0,s.jsxs)(l.A,{children:[(0,s.jsx)(i.A,{value:"code",label:"C\xf3digo TypeScript ejemplo",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"export const mergeSort = (arr: number[]): number[] => {\n  if (arr.length <= 1) return arr;\n\n  const mid = Math.floor(arr.length / 2);\n  const left = mergeSort(arr.slice(0, mid));\n  const right = mergeSort(arr.slice(mid));\n\n  return merge(left, right);\n};\n\nconst merge = (left: number[], right: number[]): number[] => {\n  const result: number[] = [];\n  while (left.length && right.length) {\n    result.push(left[0] <= right[0] ? left.shift()! : right.shift()!);\n  }\n  return [...result, ...left, ...right];\n};\n"})})}),(0,s.jsx)(i.A,{value:"test",label:"Test Unitario",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"import { mergeSort } from './mergeSort';\n\ntest('mergeSort sorts correctly', () => {\n  expect(mergeSort([5, 3, 8, 1])).toEqual([1, 3, 5, 8]);\n  expect(mergeSort([])).toEqual([]);\n  expect(mergeSort([1])).toEqual([1]);\n});\n"})})})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"aplicaciones-pr\xe1cticas",children:"Aplicaciones pr\xe1cticas"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Ordenamiento de grandes vol\xfamenes de datos (ej. procesamiento de logs)."}),"\n",(0,s.jsx)(n.li,{children:"Ordenamiento externo (cuando los datos no caben en memoria)."}),"\n",(0,s.jsx)(n.li,{children:"Implementaciones eficientes en sistemas embebidos y sistemas de bases de datos."}),"\n",(0,s.jsx)(n.li,{children:"Algoritmo base en bibliotecas de ordenamiento h\xedbridas (ej. Timsort)."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cormen, T. H., Leiserson, C. E., Rivest, R. L., & Stein, C. (2022). Introduction to Algorithms (4th ed.). MIT Press."}),"\n",(0,s.jsx)(n.li,{children:"Knuth, D. E. (1998). The Art of Computer Programming, Vol. 3: Sorting and Searching (2nd ed.). Addison-Wesley."}),"\n",(0,s.jsx)(n.li,{children:"Sedgewick, R., & Wayne, K. (2011). Algorithms (4th ed.). Addison-Wesley."}),"\n",(0,s.jsx)(n.li,{children:"Weiss, M. A. (2020). Data Structures and Algorithm Analysis in Java (4th ed.). Pearson."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>i});var a=r(6540);const s={},t=a.createContext(s);function l(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(t.Provider,{value:n},e.children)}},9365:(e,n,r)=>{r.d(n,{A:()=>l});r(6540);var a=r(4164);const s={tabItem:"tabItem_Ymn6"};var t=r(4848);function l({children:e,hidden:n,className:r}){return(0,t.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,r),hidden:n,children:e})}}}]);