"use strict";(globalThis.webpackChunkdata_structures=globalThis.webpackChunkdata_structures||[]).push([[3505],{1470:(e,a,n)=>{n.d(a,{A:()=>y});var s=n(6540),r=n(4164),i=n(3104),t=n(6347),l=n(205),o=n(7485),c=n(1682),d=n(679);function m(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:a,children:n}=e;return(0,s.useMemo)(()=>{const e=a??function(e){return m(e).map(({props:{value:e,label:a,attributes:n,default:s}})=>({value:e,label:a,attributes:n,default:s}))}(n);return function(e){const a=(0,c.XI)(e,(e,a)=>e.value===a.value);if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[a,n])}function u({value:e,tabValues:a}){return a.some(a=>a.value===e)}function p({queryString:e=!1,groupId:a}){const n=(0,t.W6)(),r=function({queryString:e=!1,groupId:a}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:e,groupId:a});return[(0,o.aZ)(r),(0,s.useCallback)(e=>{if(!r)return;const a=new URLSearchParams(n.location.search);a.set(r,e),n.replace({...n.location,search:a.toString()})},[r,n])]}function x(e){const{defaultValue:a,queryString:n=!1,groupId:r}=e,i=h(e),[t,o]=(0,s.useState)(()=>function({defaultValue:e,tabValues:a}){if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${a.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=a.find(e=>e.default)??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:a,tabValues:i})),[c,m]=p({queryString:n,groupId:r}),[x,j]=function({groupId:e}){const a=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,r]=(0,d.Dv)(a);return[n,(0,s.useCallback)(e=>{a&&r.set(e)},[a,r])]}({groupId:r}),g=(()=>{const e=c??x;return u({value:e,tabValues:i})?e:null})();(0,l.A)(()=>{g&&o(g)},[g]);return{selectedValue:t,selectValue:(0,s.useCallback)(e=>{if(!u({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),m(e),j(e)},[m,j,i]),tabValues:i}}var j=n(2303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=n(4848);function b({className:e,block:a,selectedValue:n,selectValue:s,tabValues:t}){const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.a_)(),c=e=>{const a=e.currentTarget,r=l.indexOf(a),i=t[r].value;i!==n&&(o(a),s(i))},d=e=>{let a=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;a=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;a=l[n]??l[l.length-1];break}}a?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":a},e),children:t.map(({value:e,label:a,attributes:s})=>(0,v.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{l.push(e)},onKeyDown:d,onClick:c,...s,className:(0,r.A)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":n===e}),children:a??e},e))})}function f({lazy:e,children:a,selectedValue:n}){const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(e){const e=i.find(e=>e.props.value===n);return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:i.map((e,a)=>(0,s.cloneElement)(e,{key:a,hidden:e.props.value!==n}))})}function N(e){const a=x(e);return(0,v.jsxs)("div",{className:(0,r.A)("tabs-container",g.tabList),children:[(0,v.jsx)(b,{...a,...e}),(0,v.jsx)(f,{...a,...e})]})}function y(e){const a=(0,j.A)();return(0,v.jsx)(N,{...e,children:m(e.children)},String(a))}},8453:(e,a,n)=>{n.d(a,{R:()=>t,x:()=>l});var s=n(6540);const r={},i=s.createContext(r);function t(e){const a=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(i.Provider,{value:a},e.children)}},9365:(e,a,n)=>{n.d(a,{A:()=>t});n(6540);var s=n(4164);const r={tabItem:"tabItem_Ymn6"};var i=n(4848);function t({children:e,hidden:a,className:n}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,n),hidden:a,children:e})}},9980:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>m});const s=JSON.parse('{"id":"sorting_algorithms/quick_sort","title":"Quick Sort","description":"Quick Sort es un algoritmo de ordenamiento eficiente basado en el paradigma de Divide y Vencer\xe1s, como Merge Sort, pero con una ventaja significativa: puede ejecutarse en memoria sin espacio extra (es in-place).","source":"@site/docs/05_sorting_algorithms/06_quick_sort.md","sourceDirName":"05_sorting_algorithms","slug":"/sorting_algorithms/quick_sort","permalink":"/Data_Structures/docs/sorting_algorithms/quick_sort","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/05_sorting_algorithms/06_quick_sort.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar-position":6},"sidebar":"tutorialSidebar","previous":{"title":"Merge Sort","permalink":"/Data_Structures/docs/sorting_algorithms/merge_sort"},"next":{"title":"Heap Sort","permalink":"/Data_Structures/docs/sorting_algorithms/heap_sort"}}');var r=n(4848),i=n(8453),t=n(1470),l=n(9365);const o={"sidebar-position":6},c="Quick Sort",d={},m=[{value:"Complejidades",id:"complejidades",level:2},{value:"Propiedades",id:"propiedades",level:2},{value:"Diagrama de secuencia",id:"diagrama-de-secuencia",level:2},{value:"Ejemplo t\xe9cnico",id:"ejemplo-t\xe9cnico",level:2},{value:"Aplicaciones pr\xe1cticas",id:"aplicaciones-pr\xe1cticas",level:2},{value:"Referencias",id:"referencias",level:2}];function h(e){const a={annotation:"annotation",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",math:"math",mermaid:"mermaid",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msup:"msup",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"quick-sort",children:"Quick Sort"})}),"\n",(0,r.jsxs)(a.p,{children:["Quick Sort es un algoritmo de ordenamiento eficiente basado en el paradigma de ",(0,r.jsx)(a.strong,{children:"Divide y Vencer\xe1s"}),", como Merge Sort, pero con una ventaja significativa: puede ejecutarse en memoria sin espacio extra (es ",(0,r.jsx)(a.strong,{children:"in-place"}),")."]}),"\n",(0,r.jsx)(a.p,{children:"El algoritmo funciona de la siguiente manera:"}),"\n",(0,r.jsxs)(a.ol,{children:["\n",(0,r.jsxs)(a.li,{children:["Elegir un ",(0,r.jsx)(a.strong,{children:"pivote"})," (pivot)."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Particionar:"})," reorganizar los elementos de tal manera que los menores al pivote queden a su izquierda y los mayores a su derecha."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Recursi\xf3n:"})," aplicar el mismo proceso a cada subarreglo (izquierdo y derecho del pivote)."]}),"\n"]}),"\n",(0,r.jsxs)(a.blockquote,{children:["\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:"Nota:"})," El rendimiento depende de c\xf3mo se elija el pivote."]}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"complejidades",children:"Complejidades"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["En el mejor caso, la complejidad temporal es de ",(0,r.jsxs)(a.span,{className:"katex",children:[(0,r.jsx)(a.span,{className:"katex-mathml",children:(0,r.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(a.semantics,{children:[(0,r.jsxs)(a.mrow,{children:[(0,r.jsx)(a.mi,{children:"O"}),(0,r.jsx)(a.mo,{stretchy:"false",children:"("}),(0,r.jsx)(a.mi,{children:"n"}),(0,r.jsx)(a.mi,{children:"l"}),(0,r.jsx)(a.mi,{children:"o"}),(0,r.jsx)(a.mi,{children:"g"}),(0,r.jsx)(a.mi,{children:"n"}),(0,r.jsx)(a.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(a.annotation,{encoding:"application/x-tex",children:"O(n log n)"})]})})}),(0,r.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(a.span,{className:"base",children:[(0,r.jsx)(a.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(a.span,{className:"mopen",children:"("}),(0,r.jsx)(a.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,r.jsx)(a.span,{className:"mord mathnormal",children:"o"}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,r.jsx)(a.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(a.span,{className:"mclose",children:")"})]})})]}),", y la complejidad espacial es de ",(0,r.jsxs)(a.span,{className:"katex",children:[(0,r.jsx)(a.span,{className:"katex-mathml",children:(0,r.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(a.semantics,{children:[(0,r.jsxs)(a.mrow,{children:[(0,r.jsx)(a.mi,{children:"O"}),(0,r.jsx)(a.mo,{stretchy:"false",children:"("}),(0,r.jsx)(a.mi,{children:"l"}),(0,r.jsx)(a.mi,{children:"o"}),(0,r.jsx)(a.mi,{children:"g"}),(0,r.jsx)(a.mi,{children:"n"}),(0,r.jsx)(a.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(a.annotation,{encoding:"application/x-tex",children:"O(log n)"})]})})}),(0,r.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(a.span,{className:"base",children:[(0,r.jsx)(a.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(a.span,{className:"mopen",children:"("}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,r.jsx)(a.span,{className:"mord mathnormal",children:"o"}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,r.jsx)(a.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(a.span,{className:"mclose",children:")"})]})})]})]}),"\n",(0,r.jsxs)(a.li,{children:["En el caso promedio, la complejidad temporal es de ",(0,r.jsxs)(a.span,{className:"katex",children:[(0,r.jsx)(a.span,{className:"katex-mathml",children:(0,r.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(a.semantics,{children:[(0,r.jsxs)(a.mrow,{children:[(0,r.jsx)(a.mi,{children:"O"}),(0,r.jsx)(a.mo,{stretchy:"false",children:"("}),(0,r.jsx)(a.mi,{children:"n"}),(0,r.jsx)(a.mi,{children:"l"}),(0,r.jsx)(a.mi,{children:"o"}),(0,r.jsx)(a.mi,{children:"g"}),(0,r.jsx)(a.mi,{children:"n"}),(0,r.jsx)(a.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(a.annotation,{encoding:"application/x-tex",children:"O(n log n)"})]})})}),(0,r.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(a.span,{className:"base",children:[(0,r.jsx)(a.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(a.span,{className:"mopen",children:"("}),(0,r.jsx)(a.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,r.jsx)(a.span,{className:"mord mathnormal",children:"o"}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,r.jsx)(a.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(a.span,{className:"mclose",children:")"})]})})]}),", y la complejidad espacial es de ",(0,r.jsxs)(a.span,{className:"katex",children:[(0,r.jsx)(a.span,{className:"katex-mathml",children:(0,r.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(a.semantics,{children:[(0,r.jsxs)(a.mrow,{children:[(0,r.jsx)(a.mi,{children:"O"}),(0,r.jsx)(a.mo,{stretchy:"false",children:"("}),(0,r.jsx)(a.mi,{children:"l"}),(0,r.jsx)(a.mi,{children:"o"}),(0,r.jsx)(a.mi,{children:"g"}),(0,r.jsx)(a.mi,{children:"n"}),(0,r.jsx)(a.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(a.annotation,{encoding:"application/x-tex",children:"O(log n)"})]})})}),(0,r.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(a.span,{className:"base",children:[(0,r.jsx)(a.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(a.span,{className:"mopen",children:"("}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,r.jsx)(a.span,{className:"mord mathnormal",children:"o"}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,r.jsx)(a.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(a.span,{className:"mclose",children:")"})]})})]})]}),"\n",(0,r.jsxs)(a.li,{children:["En el peor caso, la complejidad temporal es de ",(0,r.jsxs)(a.span,{className:"katex",children:[(0,r.jsx)(a.span,{className:"katex-mathml",children:(0,r.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(a.semantics,{children:[(0,r.jsxs)(a.mrow,{children:[(0,r.jsx)(a.mi,{children:"O"}),(0,r.jsx)(a.mo,{stretchy:"false",children:"("}),(0,r.jsxs)(a.msup,{children:[(0,r.jsx)(a.mi,{children:"n"}),(0,r.jsx)(a.mn,{children:"2"})]}),(0,r.jsx)(a.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(a.annotation,{encoding:"application/x-tex",children:"O(n^2)"})]})})}),(0,r.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(a.span,{className:"base",children:[(0,r.jsx)(a.span,{className:"strut",style:{height:"1.0641em",verticalAlign:"-0.25em"}}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(a.span,{className:"mopen",children:"("}),(0,r.jsxs)(a.span,{className:"mord",children:[(0,r.jsx)(a.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(a.span,{className:"msupsub",children:(0,r.jsx)(a.span,{className:"vlist-t",children:(0,r.jsx)(a.span,{className:"vlist-r",children:(0,r.jsx)(a.span,{className:"vlist",style:{height:"0.8141em"},children:(0,r.jsxs)(a.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,r.jsx)(a.span,{className:"pstrut",style:{height:"2.7em"}}),(0,r.jsx)(a.span,{className:"sizing reset-size6 size3 mtight",children:(0,r.jsx)(a.span,{className:"mord mtight",children:"2"})})]})})})})})]}),(0,r.jsx)(a.span,{className:"mclose",children:")"})]})})]}),", y la complejidad espacial es de ",(0,r.jsxs)(a.span,{className:"katex",children:[(0,r.jsx)(a.span,{className:"katex-mathml",children:(0,r.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(a.semantics,{children:[(0,r.jsxs)(a.mrow,{children:[(0,r.jsx)(a.mi,{children:"O"}),(0,r.jsx)(a.mo,{stretchy:"false",children:"("}),(0,r.jsx)(a.mi,{children:"l"}),(0,r.jsx)(a.mi,{children:"o"}),(0,r.jsx)(a.mi,{children:"g"}),(0,r.jsx)(a.mi,{children:"n"}),(0,r.jsx)(a.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(a.annotation,{encoding:"application/x-tex",children:"O(log n)"})]})})}),(0,r.jsx)(a.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(a.span,{className:"base",children:[(0,r.jsx)(a.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(a.span,{className:"mopen",children:"("}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,r.jsx)(a.span,{className:"mord mathnormal",children:"o"}),(0,r.jsx)(a.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,r.jsx)(a.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(a.span,{className:"mclose",children:")"})]})})]})]}),"\n"]}),"\n",(0,r.jsxs)(a.p,{children:["El ",(0,r.jsx)(a.strong,{children:"peor caso"})," corresponde a cuando el pivot es el menor o mayor elemento en cada paso. El ",(0,r.jsx)(a.strong,{children:"mejor caso"})," corresponde a cuando el pivot divide en 2 partes casi iguales."]}),"\n",(0,r.jsx)(a.h2,{id:"propiedades",children:"Propiedades"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["El algoritmo trabaja ",(0,r.jsx)(a.strong,{children:"in-place"}),", es decir, no usa una estructura adicional."]}),"\n",(0,r.jsx)(a.li,{children:"No es estable, es decir, no garantiza un orden relativo."}),"\n",(0,r.jsx)(a.li,{children:"No es adaptativo, no mejora con listas parcialmente ordenadas."}),"\n",(0,r.jsx)(a.li,{children:"Su eficiencia es alta, en la pr\xe1ctica es m\xe1s r\xe1pido que Merge Sort en la mayor\xeda de casos."}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"diagrama-de-secuencia",children:"Diagrama de secuencia"}),"\n",(0,r.jsx)(a.mermaid,{value:"sequenceDiagram\n    autonumber\n    participant User\n    participant QuickSort\n    participant Partition\n    participant Array\n\n    User->>QuickSort: quickSort(arr, low, high)\n    activate QuickSort\n\n    alt low >= high\n        QuickSort--\x3e>User: Retornar (ya est\xe1 ordenado)\n    else\n        QuickSort->>Partition: partition(arr, low, high)\n        activate Partition\n        Partition->>Array: Elegir pivote (arr[high])\n        Partition->>Array: Reorganizar elementos <= pivote a la izquierda\n        Partition->>Array: Intercambiar arr[i+1] con pivote\n        Partition--\x3e>QuickSort: Retornar pivotIndex\n        deactivate Partition\n\n        QuickSort->>QuickSort: quickSort(arr, low, pivotIndex - 1)\n        QuickSort->>QuickSort: quickSort(arr, pivotIndex + 1, high)\n        QuickSort--\x3e>User: Lista ordenada\n    deactivate QuickSort\n    end"}),"\n",(0,r.jsxs)(a.ol,{children:["\n",(0,r.jsx)(a.li,{children:"El usuario solicita ordenar un arreglo indicando la posici\xf3n m\xe1s baja y m\xe1s alta."}),"\n",(0,r.jsxs)(a.li,{children:["El algoritmo valida si el valor de ",(0,r.jsx)(a.code,{children:"low"})," es mayor o igual a ",(0,r.jsx)(a.code,{children:"high"}),", en cuyo caso se retorna que ya est\xe1 ordenado el arreglo."]}),"\n",(0,r.jsx)(a.li,{children:"El algoritmo particiona el arreglo usando los valores de alto y bajo."}),"\n",(0,r.jsx)(a.li,{children:"Durante la partici\xf3n se elige el valor pivot, el cual inicia con el valor almacenado en la posici\xf3n m\xe1s alta."}),"\n",(0,r.jsx)(a.li,{children:"Se reorganizan los elementos menores o igual al pivot de la izquierda."}),"\n",(0,r.jsxs)(a.li,{children:["Se intercambia los valores de ",(0,r.jsx)(a.code,{children:"i + 1"})," en el arreglo con el elemento del pivote."]}),"\n",(0,r.jsx)(a.li,{children:"La partici\xf3n retorna el indice del pivot."}),"\n",(0,r.jsx)(a.li,{children:"Quick sort repite los pasos anteriores de ordenamiento con el lado izquierdo con respecto al pivot."}),"\n",(0,r.jsx)(a.li,{children:"Quick sort repite los pasos anteriores de ordenamiento con el lado derecho con respecto al pivot"}),"\n",(0,r.jsx)(a.li,{children:"Finalmente se retorna la lista ordenada."}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"ejemplo-t\xe9cnico",children:"Ejemplo t\xe9cnico"}),"\n","\n",(0,r.jsxs)(t.A,{children:[(0,r.jsx)(l.A,{value:"java",label:"Paradigma: Orientado a Objetos",children:(0,r.jsxs)(t.A,{children:[(0,r.jsx)(l.A,{value:"code",label:"C\xf3digo Java Ejemplo",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"showLineNumbers",children:"public class QuickSort {\n    public static void sort(int[] arr, int low, int high) {\n        if (low < high) {\n            int pivot = partition(arr, low, high);\n            sort(arr, low, pivot - 1);\n            sort(arr, pivot + 1, high);\n        }\n    }\n\n    private static int partition(int[] arr, int low, int high) {\n        int pivot = arr[high];\n        int i = low - 1;\n\n        for (int j = low; j < high; j++) {\n            if (arr[j] <= pivot) {\n                i++;\n                swap(arr, i, j);\n            }\n        }\n\n        swap(arr, i + 1, high);\n        return i + 1;\n    }\n\n    private static void swap(int[] arr, int i, int j) {\n        int temp = arr[i]; \n        arr[i] = arr[j]; \n        arr[j] = temp;\n    }\n}\n"})})}),(0,r.jsx)(l.A,{value:"test",label:"Test Unitario",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:"showLineNumbers",children:"import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class QuickSortTest {\n    @Test\n    void testQuickSort() {\n        int[] data = {5, 2, 9, 1, 3};\n        QuickSort.sort(data, 0, data.length - 1);\n        assertArrayEquals(new int[]{1, 2, 3, 5, 9}, data);\n    }\n}\n"})})})]})}),(0,r.jsx)(l.A,{value:"python",label:"Paradigma: Procedural",children:(0,r.jsxs)(t.A,{children:[(0,r.jsx)(l.A,{value:"code",label:"C\xf3digo Python Ejemplo",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-py",metastring:"showLineNumbers",children:"def quick_sort(arr, low, high):\n    if low < high:\n        pi = partition(arr, low, high)\n        quick_sort(arr, low, pi - 1)\n        quick_sort(arr, pi + 1, high)\n\ndef partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return i + 1\n"})})}),(0,r.jsx)(l.A,{value:"test",label:"Test Unitario",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-py",metastring:"showLineNumbers",children:"from quick_sort import quick_sort\n\ndef test_quick_sort():\n    data = [3, 7, 2, 5, 1]\n    quick_sort(data, 0, len(data) - 1)\n    assert data == [1, 2, 3, 5, 7]\n"})})})]})}),(0,r.jsx)(l.A,{value:"functional",label:"Paradigma: Funcional",children:(0,r.jsxs)(t.A,{children:[(0,r.jsx)(l.A,{value:"code",label:"C\xf3digo TypeScript ejemplo",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ts",metastring:"showLineNumbers",children:"export const quickSort = (arr: number[]): number[] => {\n  if (arr.length < 2) return arr;\n\n  const pivot = arr[arr.length - 1];\n  const left = arr.slice(0, -1).filter(x => x <= pivot);\n  const right = arr.slice(0, -1).filter(x => x > pivot);\n\n  return [...quickSort(left), pivot, ...quickSort(right)];\n};\n"})})}),(0,r.jsx)(l.A,{value:"test",label:"Test Unitario",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ts",metastring:"showLineNumbers",children:'import { quickSort } from "./quickSort";\n\ntest("quickSort works", () => {\n  expect(quickSort([4, 1, 3, 9, 7])).toEqual([1, 3, 4, 7, 9]);\n});\n'})})})]})})]}),"\n",(0,r.jsx)(a.h2,{id:"aplicaciones-pr\xe1cticas",children:"Aplicaciones pr\xe1cticas"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"Sistemas embebidos y hardware con poca memoria."}),"\n",(0,r.jsx)(a.li,{children:"Librer\xedas est\xe1ndar: C++, Java, Python implementan quicksort o variantes (ej. introsort)."}),"\n",(0,r.jsx)(a.li,{children:"Bases de datos y procesamiento en memoria."}),"\n",(0,r.jsx)(a.li,{children:"Lenguajes como Go, Rust, JavaScript usan quicksort h\xedbrido internamente."}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"referencias",children:"Referencias"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"Cormen, T. H., Leiserson, C. E., Rivest, R. L., & Stein, C. (2022). Introduction to Algorithms (4th ed.). MIT Press."}),"\n",(0,r.jsx)(a.li,{children:"Sedgewick, R., & Wayne, K. (2011). Algorithms (4th ed.). Addison-Wesley."}),"\n",(0,r.jsx)(a.li,{children:"Knuth, D. E. (1998). The Art of Computer Programming, Vol. 3: Sorting and Searching. Addison-Wesley."}),"\n",(0,r.jsx)(a.li,{children:"Weiss, M. A. (2020). Data Structures and Algorithm Analysis in Java (4th ed.). Pearson."}),"\n"]})]})}function u(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);