"use strict";(globalThis.webpackChunkdata_structures=globalThis.webpackChunkdata_structures||[]).push([[6882],{1470:(e,r,n)=>{n.d(r,{A:()=>y});var t=n(6540),s=n(4164),a=n(3104),i=n(6347),o=n(205),l=n(7485),d=n(1682),u=n(679);function c(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:r,children:n}=e;return(0,t.useMemo)(()=>{const e=r??function(e){return c(e).map(({props:{value:e,label:r,attributes:n,default:t}})=>({value:e,label:r,attributes:n,default:t}))}(n);return function(e){const r=(0,d.XI)(e,(e,r)=>e.value===r.value);if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[r,n])}function p({value:e,tabValues:r}){return r.some(r=>r.value===e)}function f({queryString:e=!1,groupId:r}){const n=(0,i.W6)(),s=function({queryString:e=!1,groupId:r}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:e,groupId:r});return[(0,l.aZ)(s),(0,t.useCallback)(e=>{if(!s)return;const r=new URLSearchParams(n.location.search);r.set(s,e),n.replace({...n.location,search:r.toString()})},[s,n])]}function b(e){const{defaultValue:r,queryString:n=!1,groupId:s}=e,a=h(e),[i,l]=(0,t.useState)(()=>function({defaultValue:e,tabValues:r}){if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${r.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=r.find(e=>e.default)??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:r,tabValues:a})),[d,c]=f({queryString:n,groupId:s}),[b,m]=function({groupId:e}){const r=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,s]=(0,u.Dv)(r);return[n,(0,t.useCallback)(e=>{r&&s.set(e)},[r,s])]}({groupId:s}),v=(()=>{const e=d??b;return p({value:e,tabValues:a})?e:null})();(0,o.A)(()=>{v&&l(v)},[v]);return{selectedValue:i,selectValue:(0,t.useCallback)(e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),m(e)},[c,m,a]),tabValues:a}}var m=n(2303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=n(4848);function x({className:e,block:r,selectedValue:n,selectValue:t,tabValues:i}){const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,a.a_)(),d=e=>{const r=e.currentTarget,s=o.indexOf(r),a=i[s].value;a!==n&&(l(r),t(a))},u=e=>{let r=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=o.indexOf(e.currentTarget)+1;r=o[n]??o[0];break}case"ArrowLeft":{const n=o.indexOf(e.currentTarget)-1;r=o[n]??o[o.length-1];break}}r?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":r},e),children:i.map(({value:e,label:r,attributes:t})=>(0,j.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{o.push(e)},onKeyDown:u,onClick:d,...t,className:(0,s.A)("tabs__item",v.tabItem,t?.className,{"tabs__item--active":n===e}),children:r??e},e))})}function g({lazy:e,children:r,selectedValue:n}){const a=(Array.isArray(r)?r:[r]).filter(Boolean);if(e){const e=a.find(e=>e.props.value===n);return e?(0,t.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:a.map((e,r)=>(0,t.cloneElement)(e,{key:r,hidden:e.props.value!==n}))})}function _(e){const r=b(e);return(0,j.jsxs)("div",{className:(0,s.A)("tabs-container",v.tabList),children:[(0,j.jsx)(x,{...r,...e}),(0,j.jsx)(g,{...r,...e})]})}function y(e){const r=(0,m.A)();return(0,j.jsx)(_,{...e,children:c(e.children)},String(r))}},6511:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"nolinear_structures_trees/transversals_inorder_preorder_postorder_bfs_dfs","title":"Recorridos (inorder, preorder, postorder, BFS, DFS)","description":"Un recorrido (transversal en ingl\xe9s) es una estrategia para visitar todos los nodos de un \xe1rbol en un orden espec\xedfico. Los dos enfoques m\xe1s comunes son:","source":"@site/docs/06_nolinear_structures_trees/04_transversals_inorder_preorder_postorder_bfs_dfs.md","sourceDirName":"06_nolinear_structures_trees","slug":"/nolinear_structures_trees/transversals_inorder_preorder_postorder_bfs_dfs","permalink":"/Data_Structures/docs/nolinear_structures_trees/transversals_inorder_preorder_postorder_bfs_dfs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/06_nolinear_structures_trees/04_transversals_inorder_preorder_postorder_bfs_dfs.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar-position":4},"sidebar":"tutorialSidebar","previous":{"title":"\xc1rboles Binarios de B\xfasqueda","permalink":"/Data_Structures/docs/nolinear_structures_trees/binary_search_tree_bst"}}');var s=n(4848),a=n(8453),i=n(1470),o=n(9365);const l={"sidebar-position":4},d="Recorridos (inorder, preorder, postorder, BFS, DFS)",u={},c=[{value:"DFS - B\xfasqueda en Profundidad (Depth-First Search)",id:"dfs---b\xfasqueda-en-profundidad-depth-first-search",level:2},{value:"BFS - B\xfasqueda en Amplitud (Breadth-First Search)",id:"bfs---b\xfasqueda-en-amplitud-breadth-first-search",level:2},{value:"Ejemplo t\xe9cnico",id:"ejemplo-t\xe9cnico",level:2},{value:"Aplicaciones pr\xe1cticas",id:"aplicaciones-pr\xe1cticas",level:2},{value:"Referencias",id:"referencias",level:2}];function h(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"recorridos-inorder-preorder-postorder-bfs-dfs",children:"Recorridos (inorder, preorder, postorder, BFS, DFS)"})}),"\n",(0,s.jsxs)(r.p,{children:["Un ",(0,s.jsx)(r.strong,{children:"recorrido"})," (transversal en ingl\xe9s) es una estrategia para visitar todos los nodos de un \xe1rbol en un orden espec\xedfico. Los dos enfoques m\xe1s comunes son:"]}),"\n",(0,s.jsx)(r.h2,{id:"dfs---b\xfasqueda-en-profundidad-depth-first-search",children:"DFS - B\xfasqueda en Profundidad (Depth-First Search)"}),"\n",(0,s.jsxs)(r.p,{children:["El recorrido DFS explora lo m\xe1s profundo posible por cada rama antes de retroceder. Tiene ",(0,s.jsx)(r.strong,{children:"3 variantes"})," principales para \xe1rboles binarios:"]}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Tipo"}),(0,s.jsx)(r.th,{children:"Orden de visita"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Inorden"}),(0,s.jsx)(r.td,{children:"izquierda \u2192 ra\xedz \u2192 derecha"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Preorden"}),(0,s.jsx)(r.td,{children:"ra\xedz \u2192 izquierda \u2192 derecha"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Postorden"}),(0,s.jsx)(r.td,{children:"izquierda \u2192 derecha \u2192 ra\xedz"})]})]})]}),"\n",(0,s.jsx)(r.h2,{id:"bfs---b\xfasqueda-en-amplitud-breadth-first-search",children:"BFS - B\xfasqueda en Amplitud (Breadth-First Search)"}),"\n",(0,s.jsxs)(r.p,{children:["BFS explora el \xe1rbol ",(0,s.jsx)(r.strong,{children:"nivel por nivel"}),", de izquierda a derecha. Utiliza una cola (queue) para mantener el orden de visita. Un ejemplo de recorrido BFS ser\xeda:"]}),"\n",(0,s.jsx)(r.mermaid,{value:"graph TD\n    A[10]\n    A --- B[6]\n    A --- C[15]\n    B --- D[3]\n    B --- E[8]\n    C --- F[12]\n    C --- G[17]"}),"\n",(0,s.jsx)(r.p,{children:"Recorrido BFS: 10 \u2192 6 \u2192 15 \u2192 3 \u2192 8 \u2192 12 \u2192 17"}),"\n",(0,s.jsx)(r.h2,{id:"ejemplo-t\xe9cnico",children:"Ejemplo t\xe9cnico"}),"\n","\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{value:"java",label:"Paradigma: Orientado a Objetos",children:(0,s.jsxs)(i.A,{children:[(0,s.jsxs)(o.A,{value:"code",label:"C\xf3digo Java Ejemplo",children:[(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-java",metastring:'showLineNumbers title="BinaryNode.java"',children:"public class BinaryNode {\n    public int value;\n    public BinaryNode left;\n    public BinaryNode right;\n\n    public BinaryNode(int value) {\n        this.value = value;\n    }\n}\n"})}),(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-java",metastring:'showLineNumbers tittle="BinaryTree.java"',children:"import java.util.*;\n\npublic class BinaryTree {\n    private BinaryNode root;\n\n    public void setRoot(BinaryNode root) {\n        this.root = root;\n    }\n\n    public List<Integer> bfs() {\n        List<Integer> result = new ArrayList<>();\n        if (root == null) return result;\n\n        Queue<BinaryNode> queue = new LinkedList<>();\n        queue.offer(root);\n\n        while (!queue.isEmpty()) {\n            BinaryNode current = queue.poll();\n            result.add(current.value);\n\n            if (current.left != null) queue.offer(current.left);\n            if (current.right != null) queue.offer(current.right);\n        }\n\n        return result;\n    }\n}\n"})})]}),(0,s.jsx)(o.A,{value:"test",label:"Test Unitario",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-java",metastring:"showLineNumbers",children:'import org.junit.jupiter.api.Test;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass BinaryTreeTest {\n\n    @Test\n    void testBFS() {\n        // Construcci\xf3n del \xe1rbol (ejemplo arriba)\n        BinaryNode root = new BinaryNode(10);\n        root.left = new BinaryNode(6);\n        root.right = new BinaryNode(15);\n        root.left.left = new BinaryNode(3);\n        root.left.right = new BinaryNode(8);\n        root.right.left = new BinaryNode(12);\n        root.right.right = new BinaryNode(17);\n\n        BinaryTree tree = new BinaryTree();\n        tree.setRoot(root);\n\n        List<Integer> expected = List.of(10, 6, 15, 3, 8, 12, 17);\n        List<Integer> actual = tree.bfs();\n\n        assertEquals(expected, actual, "BFS traversal should return nodes level by level.");\n    }\n}\n'})})})]})}),(0,s.jsx)(o.A,{value:"python",label:"Paradigma: Procedural",children:(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{value:"code",label:"C\xf3digo Python Ejemplo",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-py",metastring:"showLineNumbers",children:'from collections import deque\nfrom typing import Optional, Dict, List\n\ndef create_node(value: int, left=None, right=None) -> Dict:\n    return {"value": value, "left": left, "right": right}\n\ndef bfs_traversal(root: Optional[Dict]) -> List[int]:\n    if root is None:\n        return []\n\n    result = []\n    queue = deque([root])\n\n    while queue:\n        node = queue.popleft()\n        result.append(node["value"])\n\n        if node["left"]:\n            queue.append(node["left"])\n        if node["right"]:\n            queue.append(node["right"])\n\n    return result\n'})})}),(0,s.jsx)(o.A,{value:"test",label:"Test Unitario",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",metastring:"showLineNumbers",children:'# test_binary_tree.py\n\nimport unittest\nfrom binary_tree import create_node, bfs_traversal\n\nclass TestBinaryTree(unittest.TestCase):\n    def test_bfs_traversal(self):\n        # Construcci\xf3n del \xe1rbol (ejemplo arriba)\n        tree = create_node(10,\n            left=create_node(6,\n                left=create_node(3),\n                right=create_node(8)),\n            right=create_node(15,\n                left=create_node(12),\n                right=create_node(17))\n        )\n\n        expected = [10, 6, 15, 3, 8, 12, 17]\n        result = bfs_traversal(tree)\n\n        self.assertEqual(result, expected)\n\nif __name__ == "__main__":\n    unittest.main()\n'})})})]})}),(0,s.jsx)(o.A,{value:"ts",label:"Paradigma: Funcional",children:(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{value:"code",label:"C\xf3digo TypeScript Ejemplo",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:"showLineNumbers",children:"\nexport type BinaryNode = {\n  value: number;\n  left: BinaryNode | null;\n  right: BinaryNode | null;\n};\n\nexport const bfs = (root: BinaryNode | null, visit: (v: number) => void): void => {\n  if (!root) return;\n\n  const queue: BinaryNode[] = [root];\n\n  while (queue.length > 0) {\n    const node = queue.shift()!;\n    visit(node.value);\n    if (node.left) queue.push(node.left);\n    if (node.right) queue.push(node.right);\n  }\n};\n"})})}),(0,s.jsx)(o.A,{value:"test",label:"Test Unitario",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:"showLineNumbers",children:'import { describe, it, expect } from "vitest";\nimport { bfs, BinaryNode } from "./binaryTree";\n\nconst createTree = (): BinaryNode => ({\n  value: 10,\n  left: {\n    value: 6,\n    left: { value: 3, left: null, right: null },\n    right: { value: 8, left: null, right: null }\n  },\n  right: {\n    value: 15,\n    left: { value: 12, left: null, right: null },\n    right: { value: 17, left: null, right: null }\n  }\n});\n\ndescribe("bfs()", () => {\n  it("should return values in level-order", () => {\n    const tree = createTree();\n    const values: number[] = [];\n\n    bfs(tree, (val) => values.push(val));\n\n    expect(values).toEqual([10, 6, 15, 3, 8, 12, 17]);\n  });\n\n  it("should handle null tree", () => {\n    const values: number[] = [];\n    bfs(null, (val) => values.push(val));\n    expect(values).toEqual([]);\n  });\n});\n'})})})]})})]}),"\n",(0,s.jsx)(r.h2,{id:"aplicaciones-pr\xe1cticas",children:"Aplicaciones pr\xe1cticas"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Algoritmo"}),(0,s.jsx)(r.th,{children:"Uso Com\xfan"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"BFS"}),(0,s.jsx)(r.td,{children:"Juegos, AI, rutas m\xe1s cortas (Dijkstra), redes"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"DFS"}),(0,s.jsx)(r.td,{children:"Verificaci\xf3n de conectividad, parsers, estructuras anidadas"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Inorden"}),(0,s.jsx)(r.td,{children:"Recuperar datos ordenados"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Preorden"}),(0,s.jsx)(r.td,{children:"Serializar \xe1rboles"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Postorden"}),(0,s.jsx)(r.td,{children:"Eliminar estructuras recursivas"})]})]})]}),"\n",(0,s.jsx)(r.h2,{id:"referencias",children:"Referencias"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Cormen, T. H., Leiserson, C. E., Rivest, R. L., & Stein, C. (2009). ",(0,s.jsx)(r.a,{href:"https://mitpress.mit.edu/9780262033848/introduction-to-algorithms/",children:"Introduction to Algorithms (3rd ed.). MIT Press."})]}),"\n",(0,s.jsxs)(r.li,{children:["Sedgewick, R., & Wayne, K. (2011). ",(0,s.jsx)(r.a,{href:"https://algs4.cs.princeton.edu/home/",children:"Algorithms (4th ed.). Addison-Wesley."})]}),"\n",(0,s.jsxs)(r.li,{children:["GeeksforGeeks. (2024). ",(0,s.jsx)(r.a,{href:"https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/",children:"Tree Traversals (Inorder, Preorder and Postorder)."})]}),"\n"]})]})}function p(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var t=n(6540);const s={},a=t.createContext(s);function i(e){const r=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:r},e.children)}},9365:(e,r,n)=>{n.d(r,{A:()=>i});n(6540);var t=n(4164);const s={tabItem:"tabItem_Ymn6"};var a=n(4848);function i({children:e,hidden:r,className:n}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,t.A)(s.tabItem,n),hidden:r,children:e})}}}]);