"use strict";(self.webpackChunkdata_structures=self.webpackChunkdata_structures||[]).push([[8007],{1470:(e,n,a)=>{a.d(n,{A:()=>g});var t=a(6540),r=a(4164),l=a(3104),s=a(6347),i=a(205),d=a(7485),o=a(1682),c=a(679);function u(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:a}=e;return(0,t.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:a,default:t}})=>({value:e,label:n,attributes:a,default:t}))}(a);return function(e){const n=(0,o.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,a])}function m({value:e,tabValues:n}){return n.some(n=>n.value===e)}function p({queryString:e=!1,groupId:n}){const a=(0,s.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,d.aZ)(r),(0,t.useCallback)(e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})},[r,a])]}function x(e){const{defaultValue:n,queryString:a=!1,groupId:r}=e,l=h(e),[s,d]=(0,t.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=n.find(e=>e.default)??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:l})),[o,u]=p({queryString:a,groupId:r}),[x,j]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[a,r]=(0,c.Dv)(n);return[a,(0,t.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:r}),N=(()=>{const e=o??x;return m({value:e,tabValues:l})?e:null})();(0,i.A)(()=>{N&&d(N)},[N]);return{selectedValue:s,selectValue:(0,t.useCallback)(e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),j(e)},[u,j,l]),tabValues:l}}var j=a(2303);const N={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=a(4848);function v({className:e,block:n,selectedValue:a,selectValue:t,tabValues:s}){const i=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.a_)(),o=e=>{const n=e.currentTarget,r=i.indexOf(n),l=s[r].value;l!==a&&(d(n),t(l))},c=e=>{let n=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const a=i.indexOf(e.currentTarget)+1;n=i[a]??i[0];break}case"ArrowLeft":{const a=i.indexOf(e.currentTarget)-1;n=i[a]??i[i.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},e),children:s.map(({value:e,label:n,attributes:t})=>(0,f.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:e=>{i.push(e)},onKeyDown:c,onClick:o,...t,className:(0,r.A)("tabs__item",N.tabItem,t?.className,{"tabs__item--active":a===e}),children:n??e},e))})}function _({lazy:e,children:n,selectedValue:a}){const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=l.find(e=>e.props.value===a);return e?(0,t.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:l.map((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==a}))})}function b(e){const n=x(e);return(0,f.jsxs)("div",{className:(0,r.A)("tabs-container",N.tabList),children:[(0,f.jsx)(v,{...n,...e}),(0,f.jsx)(_,{...n,...e})]})}function g(e){const n=(0,j.A)();return(0,f.jsx)(b,{...e,children:u(e.children)},String(n))}},7626:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>d,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"linear_structures_and_use_of_nodes/doubly_circular_linked_list","title":"Lista Enlazada Circular Doble","description":"Una lista enlazada circular doble es una estructura de datos lineal y din\xe1mica que combina las propiedades de:","source":"@site/docs/04_linear_structures_and_use_of_nodes/05_doubly_circular_linked_list.md","sourceDirName":"04_linear_structures_and_use_of_nodes","slug":"/linear_structures_and_use_of_nodes/doubly_circular_linked_list","permalink":"/Data_Structures/docs/linear_structures_and_use_of_nodes/doubly_circular_linked_list","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/04_linear_structures_and_use_of_nodes/05_doubly_circular_linked_list.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar-position":5},"sidebar":"tutorialSidebar","previous":{"title":"Lista Enlazada Circular Simple","permalink":"/Data_Structures/docs/linear_structures_and_use_of_nodes/singly_circular_linked_list"},"next":{"title":"Stack (Pilas): LIFO, implementaci\xf3n con arrays y listas enlazadas","permalink":"/Data_Structures/docs/linear_structures_and_use_of_nodes/stack"}}');var r=a(4848),l=a(8453),s=a(1470),i=a(9365);const d={"sidebar-position":5},o="Lista Enlazada Circular Doble",c={},u=[{value:"Caracter\xedsticas",id:"caracter\xedsticas",level:2},{value:"Ventajas",id:"ventajas",level:2},{value:"Desventajas",id:"desventajas",level:2},{value:"Complejidad",id:"complejidad",level:2},{value:"Representaci\xf3n visual",id:"representaci\xf3n-visual",level:2},{value:"Ejemplo T\xe9cnico",id:"ejemplo-t\xe9cnico",level:2},{value:"Aplicaciones Pr\xe1cticas",id:"aplicaciones-pr\xe1cticas",level:2},{value:"Referencias",id:"referencias",level:2}];function h(e){const n={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",math:"math",mermaid:"mermaid",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"lista-enlazada-circular-doble",children:"Lista Enlazada Circular Doble"})}),"\n",(0,r.jsxs)(n.p,{children:["Una ",(0,r.jsx)(n.strong,{children:"lista enlazada circular doble"})," es una estructura de datos lineal y din\xe1mica que combina las propiedades de:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lista doblemente enlazada:"})," cada nodo tiene una referencia al siguiente y al anterior nodo."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lista circular:"})," el \xfaltimo nodo apunta nuevamente al primer nodo (",(0,r.jsx)(n.code,{children:"head"}),") y el primer nodo apunta hacia atr\xe1s al \xfaltimo nodo (",(0,r.jsx)(n.code,{children:"tail"}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"caracter\xedsticas",children:"Caracter\xedsticas"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Cada ",(0,r.jsx)(n.strong,{children:"nodo"})," contiene:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dato."}),"\n",(0,r.jsx)(n.li,{children:"Referencia al nodo siguiente."}),"\n",(0,r.jsx)(n.li,{children:"Referencia al nodo anterior."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["El \xfaltimo nodo (",(0,r.jsx)(n.code,{children:"tail"}),") apunta al primero (",(0,r.jsx)(n.code,{children:"head"}),") y viceversa, formando un ciclo cerrado."]}),"\n",(0,r.jsxs)(n.li,{children:["Puede recorrerse en ",(0,r.jsx)(n.strong,{children:"ambas direcciones de forma continua"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"ventajas",children:"Ventajas"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Recorrido bidireccional y circular, facilitando el acceso desde cualquier nodo."}),"\n",(0,r.jsxs)(n.li,{children:["Operaciones de inserci\xf3n y eliminaci\xf3n m\xe1s eficientes en ambos extremos (",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mi,{children:"O"}),(0,r.jsx)(n.mo,{stretchy:"false",children:"("}),(0,r.jsx)(n.mn,{children:"1"}),(0,r.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(1)"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(n.span,{className:"mopen",children:"("}),(0,r.jsx)(n.span,{className:"mord",children:"1"}),(0,r.jsx)(n.span,{className:"mclose",children:")"})]})})]}),") si se mantiene referencia al \xfaltimo nodo."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"desventajas",children:"Desventajas"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Mayor uso de memoria (dos referencias por nodo)."}),"\n",(0,r.jsx)(n.li,{children:"Mayor complejidad de implementaci\xf3n (mantenimiento de punteros al eliminar o insertar)."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"complejidad",children:"Complejidad"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Inserci\xf3n/eliminaci\xf3n en extremos: ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mi,{children:"O"}),(0,r.jsx)(n.mo,{stretchy:"false",children:"("}),(0,r.jsx)(n.mn,{children:"1"}),(0,r.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(1)"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(n.span,{className:"mopen",children:"("}),(0,r.jsx)(n.span,{className:"mord",children:"1"}),(0,r.jsx)(n.span,{className:"mclose",children:")"})]})})]}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Inserci\xf3n/eliminaci\xf3n en posiciones intermedias: ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mi,{children:"O"}),(0,r.jsx)(n.mo,{stretchy:"false",children:"("}),(0,r.jsx)(n.mi,{children:"n"}),(0,r.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(n.span,{className:"mopen",children:"("}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(n.span,{className:"mclose",children:")"})]})})]}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Recorrido: ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsxs)(n.mrow,{children:[(0,r.jsx)(n.mi,{children:"O"}),(0,r.jsx)(n.mo,{stretchy:"false",children:"("}),(0,r.jsx)(n.mi,{children:"n"}),(0,r.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(n.span,{className:"mopen",children:"("}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(n.span,{className:"mclose",children:")"})]})})]}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"representaci\xf3n-visual",children:"Representaci\xf3n visual"}),"\n",(0,r.jsx)(n.mermaid,{value:"graph LR\n    A[Node1] <--\x3e B[Node2]\n    B <--\x3e C[Node3]\n    C <--\x3e D[Node4]\n    D <--\x3e E[Node4]\n    E <--\x3e A"}),"\n",(0,r.jsx)(n.h2,{id:"ejemplo-t\xe9cnico",children:"Ejemplo T\xe9cnico"}),"\n","\n",(0,r.jsxs)(s.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Paradigma: Orientado a Objetos",children:(0,r.jsxs)(s.A,{children:[(0,r.jsxs)(i.A,{value:"code",label:"C\xf3digo Java Ejemplo",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="DCNode.java" showLineNumbers',children:"class DCNode<T> {\n    private T data;\n    private DCNode<T> next;\n    private DCNode<T> prev;\n\n    public DCNode(T data) {\n        this.data = data;\n    }\n\n    public T getData() { return data; }\n    public DCNode<T> getNext() { return next; }\n    public void setNext(DCNode<T> next) { this.next = next; }\n    public DCNode<T> getPrev() { return prev; }\n    public void setPrev(DCNode<T> prev) { this.prev = prev; }\n}\n"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="DoublyCircularLinkedList.java" showLineNumbers',children:'public class DoublyCircularLinkedList<T> {\n    private DCNode<T> head = null;\n    private DCNode<T> tail = null;\n\n    public void insertAtEnd(T data) {\n        DCNode<T> newNode = new DCNode<>(data);\n        if (head == null) {\n            head = tail = newNode;\n            head.setNext(head);\n            head.setPrev(head);\n        } else {\n            tail.setNext(newNode);\n            newNode.setPrev(tail);\n            newNode.setNext(head);\n            head.setPrev(newNode);\n            tail = newNode;\n        }\n    }\n\n    public boolean delete(T data) {\n        if (head == null) return false;\n\n        DCNode<T> current = head;\n        do {\n            if (current.getData().equals(data)) {\n                if (current == head && current == tail) {\n                    head = tail = null;\n                } else {\n                    current.getPrev().setNext(current.getNext());\n                    current.getNext().setPrev(current.getPrev());\n                    if (current == head) head = current.getNext();\n                    if (current == tail) tail = current.getPrev();\n                }\n                return true;\n            }\n            current = current.getNext();\n        } while (current != head);\n\n        return false;\n    }\n\n    public String printForward() {\n        if (head == null) return "Lista vac\xeda";\n        StringBuilder sb = new StringBuilder();\n        DCNode<T> current = head;\n        do {\n            sb.append(current.getData()).append(" <-> ");\n            current = current.getNext();\n        } while (current != head);\n        return sb.append("(head)").toString();\n    }\n}\n'})})]}),(0,r.jsx)(i.A,{value:"test",label:"Test Unitario",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:"showLineNumbers",children:'import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DoublyCircularLinkedListTest {\n    @Test\n    void testInsertAndDelete() {\n        DoublyCircularLinkedList<Integer> list = new DoublyCircularLinkedList<>();\n        list.insertAtEnd(1);\n        list.insertAtEnd(2);\n        list.insertAtEnd(3);\n        assertTrue(list.printForward().contains("1 <-> 2 <-> 3"));\n        list.delete(2);\n        assertFalse(list.printForward().contains("2 <->"));\n    }\n}\n'})})})]})}),(0,r.jsx)(i.A,{value:"python",label:"Paradigma: Procedural",children:(0,r.jsxs)(s.A,{children:[(0,r.jsx)(i.A,{value:"code",label:"C\xf3digo Python Ejemplo",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'class DCNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\ndef insert_at_end(head, tail, data):\n    new_node = DCNode(data)\n    if head is None:\n        head = tail = new_node\n        head.next = head\n        head.prev = head\n    else:\n        tail.next = new_node\n        new_node.prev = tail\n        new_node.next = head\n        head.prev = new_node\n        tail = new_node\n    return head, tail\n\ndef delete_node(head, tail, data):\n    if head is None:\n        return head, tail, False\n\n    current = head\n    while True:\n        if current.data == data:\n            if current == head and current == tail:\n                return None, None, True\n            current.prev.next = current.next\n            current.next.prev = current.prev\n            if current == head:\n                head = current.next\n            if current == tail:\n                tail = current.prev\n            return head, tail, True\n        current = current.next\n        if current == head:\n            break\n    return head, tail, False\n\ndef print_forward(head):\n    if head is None:\n        return "Lista vac\xeda"\n    result = ""\n    current = head\n    while True:\n        result += f"{current.data} <-> "\n        current = current.next\n        if current == head:\n            break\n    return result + "(head)"\n'})})}),(0,r.jsx)(i.A,{value:"test",label:"Test Unitario",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import pytest\nfrom doubly_circular_linked_list import (\n    insert_at_end,\n    delete_node,\n    print_forward\n)\n\ndef test_insert_at_end_and_print_forward():\n    head, tail = None, None\n\n    # Insertar nodos\n    head, tail = insert_at_end(head, tail, 1)\n    head, tail = insert_at_end(head, tail, 2)\n    head, tail = insert_at_end(head, tail, 3)\n\n    result = print_forward(head)\n    assert result == "1 <-> 2 <-> 3 <-> (head)"\n\ndef test_delete_node_existing():\n    head, tail = None, None\n    head, tail = insert_at_end(head, tail, 1)\n    head, tail = insert_at_end(head, tail, 2)\n    head, tail = insert_at_end(head, tail, 3)\n\n    # Eliminar nodo intermedio\n    head, tail, deleted = delete_node(head, tail, 2)\n    assert deleted is True\n    assert print_forward(head) == "1 <-> 3 <-> (head)"\n\ndef test_delete_node_head_and_tail():\n    head, tail = None, None\n    head, tail = insert_at_end(head, tail, 10)\n    head, tail = insert_at_end(head, tail, 20)\n\n    # Eliminar el head\n    head, tail, deleted = delete_node(head, tail, 10)\n    assert deleted is True\n    assert print_forward(head) == "20 <-> (head)"\n\n    # Eliminar el tail (\xfaltimo nodo)\n    head, tail, deleted = delete_node(head, tail, 20)\n    assert deleted is True\n    assert print_forward(head) == "Lista vac\xeda"\n\ndef test_delete_node_non_existing():\n    head, tail = None, None\n    head, tail = insert_at_end(head, tail, 5)\n    head, tail = insert_at_end(head, tail, 15)\n\n    # Intentar eliminar nodo que no existe\n    head, tail, deleted = delete_node(head, tail, 99)\n    assert deleted is False\n    assert print_forward(head) == "5 <-> 15 <-> (head)"\n'})})})]})}),(0,r.jsx)(i.A,{value:"ts",label:"Paradigma: Funcional",children:(0,r.jsxs)(s.A,{children:[(0,r.jsx)(i.A,{value:"code",label:"C\xf3digo TS Ejemplo",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'export type DCNode<T> = {\n  data: T;\n  next: DCNode<T> | null;\n  prev: DCNode<T> | null;\n};\n\nexport const insertAtEnd = <T>(\n  head: DCNode<T> | null,\n  tail: DCNode<T> | null,\n  data: T\n): { head: DCNode<T>; tail: DCNode<T> } => {\n  const newNode: DCNode<T> = { data, next: null, prev: null };\n\n  if (!head) {\n    newNode.next = newNode;\n    newNode.prev = newNode;\n    return { head: newNode, tail: newNode };\n  }\n\n  tail!.next = newNode;\n  newNode.prev = tail;\n  newNode.next = head;\n  head.prev = newNode;\n\n  return { head, tail: newNode };\n};\n\nexport const deleteNode = <T>(\n  head: DCNode<T> | null,\n  tail: DCNode<T> | null,\n  data: T\n): { head: DCNode<T> | null; tail: DCNode<T> | null; deleted: boolean } => {\n  if (!head) return { head, tail, deleted: false };\n\n  let current = head;\n  do {\n    if (current.data === data) {\n      if (current === head && current === tail) {\n        return { head: null, tail: null, deleted: true };\n      }\n\n      current.prev!.next = current.next;\n      current.next!.prev = current.prev;\n\n      if (current === head) head = current.next;\n      if (current === tail) tail = current.prev;\n\n      return { head, tail, deleted: true };\n    }\n    current = current.next!;\n  } while (current !== head);\n\n  return { head, tail, deleted: false };\n};\n\nexport const printForward = <T>(head: DCNode<T> | null): string => {\n  if (!head) return "Lista vac\xeda";\n\n  let result = "";\n  let current = head;\n  do {\n    result += `${current.data} <-> `;\n    current = current.next!;\n  } while (current !== head);\n\n  return result + "(head)";\n};\n'})})}),(0,r.jsx)(i.A,{value:"test",label:"Test Unitario",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'import {\n  DCNode,\n  insertAtEnd,\n  deleteNode,\n  printForward\n} from "./doublyCircularLinkedList";\n\ntest("insertAtEnd and printForward", () => {\n  let head: DCNode<number> | null = null;\n  let tail: DCNode<number> | null = null;\n\n  ({ head, tail } = insertAtEnd(head, tail, 1));\n  ({ head, tail } = insertAtEnd(head, tail, 2));\n  ({ head, tail } = insertAtEnd(head, tail, 3));\n\n  expect(printForward(head)).toBe("1 <-> 2 <-> 3 <-> (head)");\n});\n\ntest("deleteNode existing element", () => {\n  let head: DCNode<number> | null = null;\n  let tail: DCNode<number> | null = null;\n\n  ({ head, tail } = insertAtEnd(head, tail, 1));\n  ({ head, tail } = insertAtEnd(head, tail, 2));\n  ({ head, tail } = insertAtEnd(head, tail, 3));\n\n  const result = deleteNode(head, tail, 2);\n  head = result.head;\n  tail = result.tail;\n\n  expect(result.deleted).toBe(true);\n  expect(printForward(head)).toBe("1 <-> 3 <-> (head)");\n});\n\ntest("deleteNode head and tail", () => {\n  let head: DCNode<number> | null = null;\n  let tail: DCNode<number> | null = null;\n\n  ({ head, tail } = insertAtEnd(head, tail, 10));\n  ({ head, tail } = insertAtEnd(head, tail, 20));\n\n  // Eliminar el head\n  let result = deleteNode(head, tail, 10);\n  head = result.head;\n  tail = result.tail;\n  expect(result.deleted).toBe(true);\n  expect(printForward(head)).toBe("20 <-> (head)");\n\n  // Eliminar el tail (\xfaltimo nodo)\n  result = deleteNode(head, tail, 20);\n  head = result.head;\n  tail = result.tail;\n  expect(result.deleted).toBe(true);\n  expect(printForward(head)).toBe("Lista vac\xeda");\n});\n\ntest("deleteNode non existing element", () => {\n  let head: DCNode<number> | null = null;\n  let tail: DCNode<number> | null = null;\n\n  ({ head, tail } = insertAtEnd(head, tail, 5));\n  ({ head, tail } = insertAtEnd(head, tail, 15));\n\n  const result = deleteNode(head, tail, 99);\n  expect(result.deleted).toBe(false);\n  expect(printForward(head)).toBe("5 <-> 15 <-> (head)");\n});\n'})})})]})})]}),"\n",(0,r.jsx)(n.h2,{id:"aplicaciones-pr\xe1cticas",children:"Aplicaciones Pr\xe1cticas"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Sistemas de reproducci\xf3n de multimedia:"})," Permiten navegar al siguiente o anterior elemento de forma circular."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Sistemas operativos:"})," Estructuras de planificaci\xf3n de procesos circulares."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Navegadores:"})," Historial circular para navegar hacia atr\xe1s o adelante."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Cormen, T. H., Leiserson, C. E., Rivest, R. L., & Stein, C. (2022). Introduction to Algorithms (4th ed.). MIT Press."}),"\n",(0,r.jsx)(n.li,{children:"Weiss, M. A. (2020). Data Structures and Algorithm Analysis in Java (4th ed.). Pearson."}),"\n",(0,r.jsx)(n.li,{children:"McDowell, G. (2016). Cracking the Coding Interview. CareerCup."}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.python.org/3/tutorial",children:"Python 3"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://jestjs.io/docs/getting-started",children:"Jest"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>i});var t=a(6540);const r={},l=t.createContext(r);function s(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(l.Provider,{value:n},e.children)}},9365:(e,n,a)=>{a.d(n,{A:()=>s});a(6540);var t=a(4164);const r={tabItem:"tabItem_Ymn6"};var l=a(4848);function s({children:e,hidden:n,className:a}){return(0,l.jsx)("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,a),hidden:n,children:e})}}}]);