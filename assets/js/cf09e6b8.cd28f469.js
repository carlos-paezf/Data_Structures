"use strict";(globalThis.webpackChunkdata_structures=globalThis.webpackChunkdata_structures||[]).push([[1982],{1470:(e,n,a)=>{a.d(n,{A:()=>b});var t=a(6540),l=a(4164),r=a(3104),i=a(6347),s=a(205),d=a(7485),c=a(1682),o=a(679);function u(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:a}=e;return(0,t.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:a,default:t}})=>({value:e,label:n,attributes:a,default:t}))}(a);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,a])}function m({value:e,tabValues:n}){return n.some(n=>n.value===e)}function p({queryString:e=!1,groupId:n}){const a=(0,i.W6)(),l=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,d.aZ)(l),(0,t.useCallback)(e=>{if(!l)return;const n=new URLSearchParams(a.location.search);n.set(l,e),a.replace({...a.location,search:n.toString()})},[l,a])]}function x(e){const{defaultValue:n,queryString:a=!1,groupId:l}=e,r=h(e),[i,d]=(0,t.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=n.find(e=>e.default)??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r})),[c,u]=p({queryString:a,groupId:l}),[x,j]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[a,l]=(0,o.Dv)(n);return[a,(0,t.useCallback)(e=>{n&&l.set(e)},[n,l])]}({groupId:l}),f=(()=>{const e=c??x;return m({value:e,tabValues:r})?e:null})();(0,s.A)(()=>{f&&d(f)},[f]);return{selectedValue:i,selectValue:(0,t.useCallback)(e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),j(e)},[u,j,r]),tabValues:r}}var j=a(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var N=a(4848);function _({className:e,block:n,selectedValue:a,selectValue:t,tabValues:i}){const s=[],{blockElementScrollPositionUntilNextRender:d}=(0,r.a_)(),c=e=>{const n=e.currentTarget,l=s.indexOf(n),r=i[l].value;r!==a&&(d(n),t(r))},o=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=s.indexOf(e.currentTarget)+1;n=s[a]??s[0];break}case"ArrowLeft":{const a=s.indexOf(e.currentTarget)-1;n=s[a]??s[s.length-1];break}}n?.focus()};return(0,N.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":n},e),children:i.map(({value:e,label:n,attributes:t})=>(0,N.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:e=>{s.push(e)},onKeyDown:o,onClick:c,...t,className:(0,l.A)("tabs__item",f.tabItem,t?.className,{"tabs__item--active":a===e}),children:n??e},e))})}function g({lazy:e,children:n,selectedValue:a}){const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=r.find(e=>e.props.value===a);return e?(0,t.cloneElement)(e,{className:(0,l.A)("margin-top--md",e.props.className)}):null}return(0,N.jsx)("div",{className:"margin-top--md",children:r.map((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==a}))})}function v(e){const n=x(e);return(0,N.jsxs)("div",{className:(0,l.A)("tabs-container",f.tabList),children:[(0,N.jsx)(_,{...n,...e}),(0,N.jsx)(g,{...n,...e})]})}function b(e){const n=(0,j.A)();return(0,N.jsx)(v,{...e,children:u(e.children)},String(n))}},2030:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>d,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"linear_structures_and_use_of_nodes/singly_circular_linked_list","title":"Lista Enlazada Circular Simple","description":"Una lista enlazada circular simple es una variaci\xf3n de la lista enlazada simple en la que el \xfaltimo nodo no apunta a null, sino que enlaza nuevamente al primer nodo (head), formando un ciclo.","source":"@site/docs/04_linear_structures_and_use_of_nodes/04_singly_circular_linked_list.md","sourceDirName":"04_linear_structures_and_use_of_nodes","slug":"/linear_structures_and_use_of_nodes/singly_circular_linked_list","permalink":"/Data_Structures/docs/linear_structures_and_use_of_nodes/singly_circular_linked_list","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/04_linear_structures_and_use_of_nodes/04_singly_circular_linked_list.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar-position":4},"sidebar":"tutorialSidebar","previous":{"title":"Lista Enlazada Doble","permalink":"/Data_Structures/docs/linear_structures_and_use_of_nodes/doubly_linked_list"},"next":{"title":"Lista Enlazada Circular Doble","permalink":"/Data_Structures/docs/linear_structures_and_use_of_nodes/doubly_circular_linked_list"}}');var l=a(4848),r=a(8453),i=a(1470),s=a(9365);const d={"sidebar-position":4},c="Lista Enlazada Circular Simple",o={},u=[{value:"Caracter\xedsticas principales",id:"caracter\xedsticas-principales",level:2},{value:"Ventajas",id:"ventajas",level:2},{value:"Desventajas",id:"desventajas",level:2},{value:"Complejidad",id:"complejidad",level:2},{value:"Representaci\xf3n visual",id:"representaci\xf3n-visual",level:2},{value:"Ejemplo T\xe9cnico",id:"ejemplo-t\xe9cnico",level:2},{value:"Aplicaciones Pr\xe1cticas",id:"aplicaciones-pr\xe1cticas",level:2},{value:"Referencias",id:"referencias",level:2}];function h(e){const n={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",math:"math",mermaid:"mermaid",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"lista-enlazada-circular-simple",children:"Lista Enlazada Circular Simple"})}),"\n",(0,l.jsxs)(n.p,{children:["Una ",(0,l.jsx)(n.strong,{children:"lista enlazada circular simple"})," es una variaci\xf3n de la lista enlazada simple en la que el \xfaltimo nodo no apunta a ",(0,l.jsx)(n.code,{children:"null"}),", sino que enlaza nuevamente al ",(0,l.jsx)(n.strong,{children:"primer nodo (head)"}),", formando un ciclo."]}),"\n",(0,l.jsx)(n.h2,{id:"caracter\xedsticas-principales",children:"Caracter\xedsticas principales"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["Cada nodo tiene:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Dato."}),"\n",(0,l.jsx)(n.li,{children:"Referencia al siguiente nodo (next)."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"El \xfaltimo nodo apunta al primero, formando una estructura circular."}),"\n",(0,l.jsxs)(n.li,{children:["Solo hay una referencia principal (",(0,l.jsx)(n.code,{children:"head"}),"), aunque opcionalmente se puede mantener un puntero al \xfaltimo nodo (",(0,l.jsx)(n.code,{children:"tail"}),") para facilitar inserciones."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"ventajas",children:"Ventajas"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Se puede recorrer infinitamente sin preocuparse de ",(0,l.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,l.jsx)(n.li,{children:"Ideal para estructuras que requieren circularidad como colas de procesos."}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"desventajas",children:"Desventajas"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Mayor complejidad al implementar inserciones y eliminaciones (mantener el enlace circular correctamente)."}),"\n",(0,l.jsx)(n.li,{children:"Puede causar bucles infinitos si no se maneja bien la condici\xf3n de parada."}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"complejidad",children:"Complejidad"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Acceso a un elemento: ",(0,l.jsxs)(n.span,{className:"katex",children:[(0,l.jsx)(n.span,{className:"katex-mathml",children:(0,l.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(n.semantics,{children:[(0,l.jsxs)(n.mrow,{children:[(0,l.jsx)(n.mi,{children:"O"}),(0,l.jsx)(n.mo,{stretchy:"false",children:"("}),(0,l.jsx)(n.mi,{children:"n"}),(0,l.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,l.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,l.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(n.span,{className:"base",children:[(0,l.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,l.jsx)(n.span,{className:"mopen",children:"("}),(0,l.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,l.jsx)(n.span,{className:"mclose",children:")"})]})})]}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Inserci\xf3n en cabeza o cola: ",(0,l.jsxs)(n.span,{className:"katex",children:[(0,l.jsx)(n.span,{className:"katex-mathml",children:(0,l.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(n.semantics,{children:[(0,l.jsxs)(n.mrow,{children:[(0,l.jsx)(n.mi,{children:"O"}),(0,l.jsx)(n.mo,{stretchy:"false",children:"("}),(0,l.jsx)(n.mn,{children:"1"}),(0,l.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,l.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(1)"})]})})}),(0,l.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(n.span,{className:"base",children:[(0,l.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,l.jsx)(n.span,{className:"mopen",children:"("}),(0,l.jsx)(n.span,{className:"mord",children:"1"}),(0,l.jsx)(n.span,{className:"mclose",children:")"})]})})]})," si se mantiene referencia al \xfaltimo nodo."]}),"\n",(0,l.jsxs)(n.li,{children:["Eliminaci\xf3n: ",(0,l.jsxs)(n.span,{className:"katex",children:[(0,l.jsx)(n.span,{className:"katex-mathml",children:(0,l.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,l.jsxs)(n.semantics,{children:[(0,l.jsxs)(n.mrow,{children:[(0,l.jsx)(n.mi,{children:"O"}),(0,l.jsx)(n.mo,{stretchy:"false",children:"("}),(0,l.jsx)(n.mi,{children:"n"}),(0,l.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,l.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,l.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(n.span,{className:"base",children:[(0,l.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,l.jsx)(n.span,{className:"mopen",children:"("}),(0,l.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,l.jsx)(n.span,{className:"mclose",children:")"})]})})]})," en el peor caso."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"representaci\xf3n-visual",children:"Representaci\xf3n visual"}),"\n",(0,l.jsx)(n.mermaid,{value:"graph LR\n    A[Node1] --\x3e B[Node2]\n    B --\x3e C[Node3]\n    C --\x3e D[Node4]\n    D --\x3e E[Node5]\n    E --\x3e A"}),"\n",(0,l.jsx)(n.h2,{id:"ejemplo-t\xe9cnico",children:"Ejemplo T\xe9cnico"}),"\n","\n",(0,l.jsxs)(i.A,{children:[(0,l.jsx)(s.A,{value:"java",label:"Paradigma: Orientado a Objetos",children:(0,l.jsxs)(i.A,{children:[(0,l.jsxs)(s.A,{value:"code",label:"C\xf3digo Java Ejemplo",children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",metastring:'title="CNode.java" showLineNumbers',children:"/**\n * Node for circular singly linked list\n */\nclass CNode<T> {\n    private T data;\n    private CNode<T> next;\n\n    public CNode(T data) {\n        this.data = data;\n        this.next = null;\n    }\n\n    public T getData() { return data; }\n    public CNode<T> getNext() { return next; }\n    public void setNext(CNode<T> next) { this.next = next; }\n}\n"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",metastring:'title="CircularSinglyLinkedList.java" showLineNumbers',children:'/**\n * Circular singly linked list\n */\npublic class CircularSinglyLinkedList<T> {\n    private CNode<T> head;\n    private CNode<T> tail;\n\n    public void insertAtEnd(T data) {\n        CNode<T> newNode = new CNode<>(data);\n        if (head == null) {\n            head = tail = newNode;\n            newNode.setNext(head);\n        } else {\n            tail.setNext(newNode);\n            tail = newNode;\n            tail.setNext(head);\n        }\n    }\n\n    public boolean delete(T data) {\n        if (head == null) return false;\n\n        // Caso especial: solo un nodo\n        if (head == tail && head.getData().equals(data)) {\n            head = tail = null;\n            return true;\n        }\n\n        CNode<T> current = head;\n        CNode<T> prev = tail;\n\n        do {\n            if (current.getData().equals(data)) {\n                if (current == head) head = head.getNext();\n                if (current == tail) tail = prev;\n                prev.setNext(current.getNext());\n                return true;\n            }\n            prev = current;\n            current = current.getNext();\n        } while (current != head);\n\n        return false;\n    }\n\n    public String printList() {\n        if (head == null) return "Lista vac\xeda";\n\n        StringBuilder sb = new StringBuilder();\n        CNode<T> current = head;\n        do {\n            sb.append(current.getData()).append(" -> ");\n            current = current.getNext();\n        } while (current != head);\n\n        return sb.append("(head)").toString();\n    }\n}\n'})})]}),(0,l.jsx)(s.A,{value:"test",label:"Test Unitario",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",metastring:"showLineNumbers",children:'import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CircularSinglyLinkedListTest {\n    @Test\n    void testInsertAndDelete() {\n        CircularSinglyLinkedList<Integer> list = new CircularSinglyLinkedList<>();\n        list.insertAtEnd(1);\n        list.insertAtEnd(2);\n        assertEquals("1 -> 2 -> (head)", list.printList());\n        list.delete(1);\n        assertTrue(list.printList().contains("2"));\n    }\n}\n'})})})]})}),(0,l.jsx)(s.A,{value:"python",label:"Paradigma: Procedural",children:(0,l.jsxs)(i.A,{children:[(0,l.jsx)(s.A,{value:"code",label:"C\xf3digo Python Ejemplo",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'class CNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef insert_at_end(head, tail, data):\n    new_node = CNode(data)\n    if head is None:\n        head = tail = new_node\n        new_node.next = head\n    else:\n        tail.next = new_node\n        tail = new_node\n        tail.next = head\n    return head, tail\n\ndef delete_node(head, tail, data):\n    if head is None:\n        return head, tail, False\n\n    # Caso: solo un nodo\n    if head == tail and head.data == data:\n        return None, None, True\n\n    current = head\n    prev = tail\n    while True:\n        if current.data == data:\n            if current == head:\n                head = head.next\n            if current == tail:\n                tail = prev\n            prev.next = current.next\n            return head, tail, True\n        prev = current\n        current = current.next\n        if current == head:\n            break\n    return head, tail, False\n\ndef print_list(head):\n    if head is None:\n        return "Lista vac\xeda"\n    result = ""\n    current = head\n    while True:\n        result += f"{current.data} -> "\n        current = current.next\n        if current == head:\n            break\n    return result + "(head)"\n'})})}),(0,l.jsx)(s.A,{value:"test",label:"Test Unitario",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",metastring:"showLineNumbers",children:'import pytest\nfrom circular_singly_linked_list import (\n    CNode,\n    insert_at_end,\n    delete_node,\n    print_list\n)\n\ndef test_insert_at_end_and_print_list():\n    head, tail = None, None\n\n    # Insertamos nodos\n    head, tail = insert_at_end(head, tail, 1)\n    head, tail = insert_at_end(head, tail, 2)\n    head, tail = insert_at_end(head, tail, 3)\n\n    result = print_list(head)\n    assert result == "1 -> 2 -> 3 -> (head)"\n\ndef test_delete_node_existing():\n    head, tail = None, None\n    head, tail = insert_at_end(head, tail, 1)\n    head, tail = insert_at_end(head, tail, 2)\n    head, tail = insert_at_end(head, tail, 3)\n\n    head, tail, deleted = delete_node(head, tail, 2)\n    assert deleted is True\n    result = print_list(head)\n    assert result == "1 -> 3 -> (head)"\n\ndef test_delete_node_head_and_tail():\n    head, tail = None, None\n    head, tail = insert_at_end(head, tail, 10)\n    head, tail = insert_at_end(head, tail, 20)\n\n    # Eliminar la cabeza\n    head, tail, deleted = delete_node(head, tail, 10)\n    assert deleted is True\n    assert print_list(head) == "20 -> (head)"\n\n    # Eliminar el \xfaltimo nodo (lista con 1 elemento)\n    head, tail, deleted = delete_node(head, tail, 20)\n    assert deleted is True\n    assert print_list(head) == "Lista vac\xeda"\n\ndef test_delete_non_existing():\n    head, tail = None, None\n    head, tail = insert_at_end(head, tail, 5)\n    head, tail = insert_at_end(head, tail, 15)\n\n    head, tail, deleted = delete_node(head, tail, 99)\n    assert deleted is False\n    assert print_list(head) == "5 -> 15 -> (head)"\n'})})})]})}),(0,l.jsx)(s.A,{value:"ts",label:"Paradigma: Funcional",children:(0,l.jsxs)(i.A,{children:[(0,l.jsx)(s.A,{value:"code",label:"C\xf3digo TS Ejemplo",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'export type CNode<T> = {\n  data: T;\n  next: CNode<T> | null;\n};\n\nexport const insertAtEnd = <T>(\n  head: CNode<T> | null,\n  tail: CNode<T> | null,\n  data: T\n): { head: CNode<T>; tail: CNode<T> } => {\n  const newNode: CNode<T> = { data, next: null };\n\n  if (!head) {\n    newNode.next = newNode;\n    return { head: newNode, tail: newNode };\n  }\n\n  tail!.next = newNode;\n  newNode.next = head;\n  return { head, tail: newNode };\n};\n\nexport const deleteNode = <T>(\n  head: CNode<T> | null,\n  tail: CNode<T> | null,\n  data: T\n): { head: CNode<T> | null; tail: CNode<T> | null; deleted: boolean } => {\n  if (!head) return { head, tail, deleted: false };\n\n  if (head === tail && head.data === data) {\n    return { head: null, tail: null, deleted: true };\n  }\n\n  let current = head;\n  let prev = tail!;\n  do {\n    if (current.data === data) {\n      if (current === head) head = head.next;\n      if (current === tail) tail = prev;\n      prev.next = current.next;\n      return { head, tail, deleted: true };\n    }\n    prev = current;\n    current = current.next!;\n  } while (current !== head);\n\n  return { head, tail, deleted: false };\n};\n\nexport const printList = <T>(head: CNode<T> | null): string => {\n  if (!head) return "Lista vac\xeda";\n\n  let result = "";\n  let current = head;\n  do {\n    result += `${current.data} -> `;\n    current = current.next!;\n  } while (current !== head);\n\n  return result + "(head)";\n};\n'})})}),(0,l.jsx)(s.A,{value:"test",label:"Test Unitario",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'import {\n  CNode,\n  insertAtEnd,\n  deleteNode,\n  printList\n} from "./circularSinglyLinkedList";\n\ntest("insertAtEnd and printList", () => {\n  let head: CNode<number> | null = null;\n  let tail: CNode<number> | null = null;\n\n  ({ head, tail } = insertAtEnd(head, tail, 1));\n  ({ head, tail } = insertAtEnd(head, tail, 2));\n  ({ head, tail } = insertAtEnd(head, tail, 3));\n\n  expect(printList(head)).toBe("1 -> 2 -> 3 -> (head)");\n});\n\ntest("deleteNode existing element", () => {\n  let head: CNode<number> | null = null;\n  let tail: CNode<number> | null = null;\n\n  ({ head, tail } = insertAtEnd(head, tail, 1));\n  ({ head, tail } = insertAtEnd(head, tail, 2));\n  ({ head, tail } = insertAtEnd(head, tail, 3));\n\n  const result = deleteNode(head, tail, 2);\n  head = result.head;\n  tail = result.tail;\n\n  expect(result.deleted).toBe(true);\n  expect(printList(head)).toBe("1 -> 3 -> (head)");\n});\n\ntest("deleteNode head and tail", () => {\n  let head: CNode<number> | null = null;\n  let tail: CNode<number> | null = null;\n\n  ({ head, tail } = insertAtEnd(head, tail, 10));\n  ({ head, tail } = insertAtEnd(head, tail, 20));\n\n  // Eliminar la cabeza\n  let result = deleteNode(head, tail, 10);\n  head = result.head;\n  tail = result.tail;\n  expect(result.deleted).toBe(true);\n  expect(printList(head)).toBe("20 -> (head)");\n\n  // Eliminar el \xfaltimo nodo (\xfanico elemento)\n  result = deleteNode(head, tail, 20);\n  head = result.head;\n  tail = result.tail;\n  expect(result.deleted).toBe(true);\n  expect(printList(head)).toBe("Lista vac\xeda");\n});\n\ntest("deleteNode non existing", () => {\n  let head: CNode<number> | null = null;\n  let tail: CNode<number> | null = null;\n\n  ({ head, tail } = insertAtEnd(head, tail, 5));\n  ({ head, tail } = insertAtEnd(head, tail, 15));\n\n  const result = deleteNode(head, tail, 99);\n  expect(result.deleted).toBe(false);\n  expect(printList(head)).toBe("5 -> 15 -> (head)");\n});\n'})})})]})})]}),"\n",(0,l.jsx)(n.h2,{id:"aplicaciones-pr\xe1cticas",children:"Aplicaciones Pr\xe1cticas"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Sistemas operativos:"})," Planificadores de procesos utilizan colas circulares."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Juegos:"})," Navegaci\xf3n circular por turnos."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Multimedia:"})," Listas de reproducci\xf3n en bucle."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Cormen, T. H., Leiserson, C. E., Rivest, R. L., & Stein, C. (2022). Introduction to Algorithms (4th ed.). MIT Press."}),"\n",(0,l.jsx)(n.li,{children:"Weiss, M. A. (2020). Data Structures and Algorithm Analysis in Java (4th ed.). Pearson."}),"\n",(0,l.jsx)(n.li,{children:"McDowell, G. (2016). Cracking the Coding Interview. CareerCup."}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.python.org/3/tutorial",children:"Python 3"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://jestjs.io/docs/getting-started",children:"Jest"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>s});var t=a(6540);const l={},r=t.createContext(l);function i(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},9365:(e,n,a)=>{a.d(n,{A:()=>i});a(6540);var t=a(4164);const l={tabItem:"tabItem_Ymn6"};var r=a(4848);function i({children:e,hidden:n,className:a}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,t.A)(l.tabItem,a),hidden:n,children:e})}}}]);